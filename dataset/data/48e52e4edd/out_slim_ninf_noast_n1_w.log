(-209, -446, 'CDG', -1)
(-181, -414, 'DDGnv_status', -1)
(-181, -346, 'CDG', 1)
(-401, -344, 'CDG', 1)
(-401, -346, 'CDG', 1)
(-406, -346, 'DDGres', 1)
(-143, -379, 'DDGavctx', 1)
(-401, -406, 'CDG', 1)
(-374, -401, 'CDG', 1)
(-181, -401, 'DDGNV_ENC_SUCCESS', 1)
(-401, -259, 'CDG', 1)
(-2, -357, 'DDGtmpoutsurf', 1)
(-181, -350, 'CDG', 1)
(-131, -374, 'DDGNV_ENC_SUCCESS', 1)
(-143, -406, 'DDGavctx', 1)
(-209, -357, 'CDG', 1)
(-386, -413, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].regptr', 1)
(-8, -357, 'DDGctx', 1)
(-209, -254, 'CDG', -1)
(-374, -386, 'CDG', 1)
(-209, -418, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', -1)
(-418, -446, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].in_map.mappedResource', -1)
(-374, -339, 'CDG', 1)
(-209, -357, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', 1)
(-350, -346, 'DDGres', 1)
(-8, -418, 'DDGctx', -1)
(-2, -433, 'DDGtmpoutsurf', -1)
(-418, -433, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].in_map.mappedResource', -1)
(-198, -433, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', -1)
(-374, -379, 'CDG', 1)
(-209, -418, 'CDG', -1)
(-357, -386, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].in_map.mappedResource', 1)
(-198, -386, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', 1)
(-401, -406, 'DDGnv_status', 1)
(-433, -446, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].regptr', -1)
(-8, -433, 'DDGctx', -1)
(-401, -413, 'CDG', 1)
(-198, -357, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', 1)
(-209, -433, 'CDG', -1)
(-401, -250, 'CDG', 1)
(-181, -339, 'CDG', 1)
(-401, -339, 'CDG', 1)
(-181, -414, 'CDG', -1)
(-209, -433, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', -1)
(-181, -350, 'DDGnv_status', 1)
(-2, -386, 'DDGtmpoutsurf', 1)
(-414, -185, 'DDGavctx', -1)
(-143, -414, 'DDGavctx', -1)
(-198, -418, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', -1)
(-374, -401, 'DDGNV_ENC_SUCCESS', 1)
(-143, -350, 'DDGavctx', 1)
(-181, -344, 'CDG', 1)
(-181, -374, 'DDGNV_ENC_SUCCESS', 1)
(-209, -374, 'CDG', 1)
(-401, -254, 'CDG', 1)
(-357, -374, 'DDGnv_status', 1)
(-414, -291, 'DDGavctx', -1)
(-374, -344, 'CDG', 1)
(-414, -322, 'DDGavctx', -1)
(-8, -386, 'DDGctx', 1)
(-414, -303, 'DDGavctx', -1)
(-374, -346, 'CDG', 1)
(-379, -346, 'DDGres', 1)
(-131, -401, 'DDGNV_ENC_SUCCESS', 1)
(-209, -386, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', 1)
(-143, -185, 'CDG', -1)
(-209, -250, 'CDG', -1)
(-374, -379, 'DDGnv_status', 1)
(-2, -418, 'DDGtmpoutsurf', -1)
(-181, -185, 'CDG', 1)
(-209, -259, 'CDG', -1)
(-357, -413, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].in_map.mappedResource', 1)
(-386, -401, 'DDGnv_status', 1)
(-448, -560, 'DDGavctx', 1)
(-502, -537, 'CDG', 1)
(-492, -519, 'CDG', -1)
(-480, -576, 'CDG', -1)
(-537, -559, 'DDGctx->registered_frames[i].regptr', 1)
(-502, -575, 'CDG', -1)
(-448, -576, 'DDGavctx', -1)
(-448, -554, 'DDGavctx', 1)
(-550, -554, 'DDGnv_status', 1)
(-480, -560, 'CDG', 1)
(-480, -561, 'CDG', 1)
(-502, -550, 'CDG', 1)
(-537, -550, 'DDGnv_status', 1)
(-550, -559, 'CDG', 1)
(-502, -537, 'DDGctx->registered_frames[i].regptr', 1)
(-502, -564, 'CDG', -1)
(-492, -564, 'DDGctx->registered_frames[i].mapped', -1)
(-502, -519, 'CDG', 1)
(-480, -577, 'CDG', -1)
(-564, -575, 'DDGctx->registered_frames[i].regptr', -1)
(-550, -554, 'CDG', 1)
(-550, -519, 'CDG', 1)
(-502, -564, 'DDGctx->registered_frames[i].regptr', -1)
(-492, -537, 'DDGctx->registered_frames[i].mapped', 1)
===========================
(-143, 0, 'D', 9, '1786', 'if (res = ff_alloc_packet2(avctx, pkt, lock_params.bitstreamSizeInBytes,0))')
(-412, 1, '-', 0, '+1811', 'goto error;')
(-446, -1, '-', 0, '-1813', 'ctx->registered_frames[tmpoutsurf->reg_idx].regptr = NULL')
(-250, 0, 'C', 10, '1819', 'av_frame_unref(tmpoutsurf->in_ref)')
(-356, 1, '-', 0, '+1796', 'goto error;')
(-291, 0, 'D', 45, '1840', 'av_log(avctx, AV_LOG_ERROR, "Unknown picture type encountered, expect the output to be broken.\\n")')
(-344, 0, 'C', 58, '1867', 'av_free(slice_offsets)')
(-385, 1, '-', 0, '+1806', 'goto error;')
(-374, 1, '-', 0, '+1804', 'if (nv_status != NV_ENC_SUCCESS)')
(-346, 0, 'C', 59, '1869', 'return res;')
(-414, -1, '-', 0, '-1795', 'nvenc_print_error(avctx, nv_status, "Failed unlocking bitstream buffer, expect the gates of mordor to open")')
(-357, 1, '-', 0, '+1803', 'nv_status = p_nvenc->nvEncUnmapInputResource(ctx->nvencoder, ctx->registered_frames[tmpoutsurf->reg_idx].in_map.mappedResource)')
(-406, 1, '-', 0, '+1810', 'res = nvenc_print_error(avctx, nv_status, "Failed unregistering input resource")')
(-185, 0, 'D', 5, '1800', 'if (avctx->pix_fmt == AV_PIX_FMT_CUDA || avctx->pix_fmt == AV_PIX_FMT_D3D11)')
(-322, 0, 'D', 60, '1855', 'res = nvenc_set_timestamp(avctx, &lock_params, pkt)')
(-198, 0, 'D', 2, '1801', 'ctx->registered_frames[tmpoutsurf->reg_idx].mapped -= 1')
(-8, 0, 'D', 60, '1743', '*ctx = avctx->priv_data')
(-418, -1, '-', 0, '-1803', 'p_nvenc->nvEncUnmapInputResource(ctx->nvencoder, ctx->registered_frames[tmpoutsurf->reg_idx].in_map.mappedResource)')
(-433, -1, '-', 0, '-1804', 'p_nvenc->nvEncUnregisterResource(ctx->nvencoder, ctx->registered_frames[tmpoutsurf->reg_idx].regptr)')
(-254, 0, 'C', 12, '1821', 'tmpoutsurf->input_surface = NULL')
(-401, 1, '-', 0, '+1809', 'if (nv_status != NV_ENC_SUCCESS)')
(-2, 0, 'D', 62, '1741', 'process_output_surface (AVCodecContext *avctx,AVPacket *pkt,NvencSurface *tmpoutsurf)')
(-339, 0, 'C', 55, '1864', 'timestamp_queue_dequeue(ctx->timestamp_list)')
(-131, 0, 'D', 23, '1781', 'if (nv_status != NV_ENC_SUCCESS)')
(-181, 0, 'D', 1, '1794', 'if (nv_status != NV_ENC_SUCCESS)')
(-379, 1, '-', 0, '+1805', 'res = nvenc_print_error(avctx, nv_status, "Failed unmapping input resource")')
(-259, 0, 'C', 15, '1824', 'switch (lock_params.pictureType)')
(-386, 1, '-', 0, '+1808', 'nv_status = p_nvenc->nvEncUnregisterResource(ctx->nvencoder, ctx->registered_frames[tmpoutsurf->reg_idx].regptr)')
(-350, 1, '-', 0, '+1795', 'res = nvenc_print_error(avctx, nv_status, "Failed unlocking bitstream buffer, expect the gates of mordor to open")')
(-303, 0, 'D', 53, '1848', 'avctx->coded_frame->pict_type = pict_type')
(-209, 0, 'C', 1, '1802', 'if (ctx->registered_frames[tmpoutsurf->reg_idx].mapped == 0)')
(-413, 1, '-', 0, '+1813', 'ctx->registered_frames[tmpoutsurf->reg_idx].regptr = NULL')
(-537, 1, '-', 0, '+1540', 'nv_status = p_nvenc->nvEncUnregisterResource(ctx->nvencoder, ctx->registered_frames[i].regptr)')
(-576, -1, '-', 0, '-1552', 'av_log(avctx, AV_LOG_ERROR, "Too many registered CUDA frames\\n")')
(-564, -1, '-', 0, '-1540', 'p_nvenc->nvEncUnregisterResource(ctx->nvencoder,\\n                                                ctx->registered_frames[i].regptr)')
(-550, 1, '-', 0, '+1541', 'if (nv_status != NV_ENC_SUCCESS)')
(-502, 0, 'C', 1, '1539', 'if (ctx->registered_frames[i].regptr)')
(-577, -1, '-', 0, '-1553', 'return AVERROR(ENOMEM);')
(-480, 0, 'C', 15, '1537', 'for (i = 0; i < ctx->nb_registered_frames; i++)')
(-448, 0, 'D', 15, '1527', 'nvenc_find_free_reg_resource (AVCodecContext *avctx)')
(-492, 0, 'C', 2, '1538', 'if (!ctx->registered_frames[i].mapped)')
(-536, 1, '-', 0, '+1536', 'if (ctx->nb_registered_frames == FF_ARRAY_ELEMS(ctx->registered_frames))')
(-560, 1, '-', 0, '+1552', 'av_log(avctx, AV_LOG_ERROR, "Too many registered CUDA frames\\n")')
(-561, 1, '-', 0, '+1553', 'return AVERROR(ENOMEM);')
(-559, 1, '-', 0, '+1543', 'ctx->registered_frames[i].regptr = NULL')
(-519, 0, 'C', 4, '1545', 'return i;')
(-554, 1, '-', 0, '+1542', 'return nvenc_print_error(avctx, nv_status, "Failed unregistering unused input resource");')
(-563, -1, '-', 0, '-1536', 'if (ctx->nb_registered_frames == FF_ARRAY_ELEMS(ctx->registered_frames))')
(-575, -1, '-', 0, '-1543', 'ctx->registered_frames[i].regptr = NULL')
---------------------------
(-209, -446, 'CDG', -1)
(-181, -414, 'DDGnv_status', -1)
(-209, -254, 'CDG', -1)
(-209, -418, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', -1)
(-418, -446, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].in_map.mappedResource', -1)
(-8, -418, 'DDGctx', -1)
(-2, -433, 'DDGtmpoutsurf', -1)
(-418, -433, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].in_map.mappedResource', -1)
(-198, -433, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', -1)
(-209, -418, 'CDG', -1)
(-433, -446, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].regptr', -1)
(-8, -433, 'DDGctx', -1)
(-209, -433, 'CDG', -1)
(-181, -414, 'CDG', -1)
(-209, -433, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', -1)
(-414, -185, 'DDGavctx', -1)
(-143, -414, 'DDGavctx', -1)
(-198, -418, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', -1)
(-414, -291, 'DDGavctx', -1)
(-414, -322, 'DDGavctx', -1)
(-414, -303, 'DDGavctx', -1)
(-143, -185, 'CDG', -1)
(-209, -250, 'CDG', -1)
(-2, -418, 'DDGtmpoutsurf', -1)
(-209, -259, 'CDG', -1)
(-492, -519, 'CDG', -1)
(-480, -576, 'CDG', -1)
(-502, -575, 'CDG', -1)
(-448, -576, 'DDGavctx', -1)
(-502, -564, 'CDG', -1)
(-492, -564, 'DDGctx->registered_frames[i].mapped', -1)
(-480, -577, 'CDG', -1)
(-564, -575, 'DDGctx->registered_frames[i].regptr', -1)
(-502, -564, 'DDGctx->registered_frames[i].regptr', -1)
===========================
(-143, 0, 'D', 9, '1786', 'if (res = ff_alloc_packet2(avctx, pkt, lock_params.bitstreamSizeInBytes,0))')
(-446, -1, '-', 0, '-1813', 'ctx->registered_frames[tmpoutsurf->reg_idx].regptr = NULL')
(-250, 0, 'C', 10, '1819', 'av_frame_unref(tmpoutsurf->in_ref)')
(-291, 0, 'D', 45, '1840', 'av_log(avctx, AV_LOG_ERROR, "Unknown picture type encountered, expect the output to be broken.\\n")')
(-344, 0, 'C', 58, '1867', 'av_free(slice_offsets)')
(-346, 0, 'C', 59, '1869', 'return res;')
(-414, -1, '-', 0, '-1795', 'nvenc_print_error(avctx, nv_status, "Failed unlocking bitstream buffer, expect the gates of mordor to open")')
(-185, 0, 'D', 5, '1800', 'if (avctx->pix_fmt == AV_PIX_FMT_CUDA || avctx->pix_fmt == AV_PIX_FMT_D3D11)')
(-322, 0, 'D', 60, '1855', 'res = nvenc_set_timestamp(avctx, &lock_params, pkt)')
(-198, 0, 'D', 2, '1801', 'ctx->registered_frames[tmpoutsurf->reg_idx].mapped -= 1')
(-8, 0, 'D', 60, '1743', '*ctx = avctx->priv_data')
(-418, -1, '-', 0, '-1803', 'p_nvenc->nvEncUnmapInputResource(ctx->nvencoder, ctx->registered_frames[tmpoutsurf->reg_idx].in_map.mappedResource)')
(-433, -1, '-', 0, '-1804', 'p_nvenc->nvEncUnregisterResource(ctx->nvencoder, ctx->registered_frames[tmpoutsurf->reg_idx].regptr)')
(-254, 0, 'C', 12, '1821', 'tmpoutsurf->input_surface = NULL')
(-2, 0, 'D', 62, '1741', 'process_output_surface (AVCodecContext *avctx,AVPacket *pkt,NvencSurface *tmpoutsurf)')
(-339, 0, 'C', 55, '1864', 'timestamp_queue_dequeue(ctx->timestamp_list)')
(-131, 0, 'D', 23, '1781', 'if (nv_status != NV_ENC_SUCCESS)')
(-181, 0, 'D', 1, '1794', 'if (nv_status != NV_ENC_SUCCESS)')
(-259, 0, 'C', 15, '1824', 'switch (lock_params.pictureType)')
(-303, 0, 'D', 53, '1848', 'avctx->coded_frame->pict_type = pict_type')
(-209, 0, 'C', 1, '1802', 'if (ctx->registered_frames[tmpoutsurf->reg_idx].mapped == 0)')
(-576, -1, '-', 0, '-1552', 'av_log(avctx, AV_LOG_ERROR, "Too many registered CUDA frames\\n")')
(-564, -1, '-', 0, '-1540', 'p_nvenc->nvEncUnregisterResource(ctx->nvencoder,\\n                                                ctx->registered_frames[i].regptr)')
(-502, 0, 'C', 1, '1539', 'if (ctx->registered_frames[i].regptr)')
(-577, -1, '-', 0, '-1553', 'return AVERROR(ENOMEM);')
(-480, 0, 'C', 15, '1537', 'for (i = 0; i < ctx->nb_registered_frames; i++)')
(-448, 0, 'D', 15, '1527', 'nvenc_find_free_reg_resource (AVCodecContext *avctx)')
(-492, 0, 'C', 2, '1538', 'if (!ctx->registered_frames[i].mapped)')
(-519, 0, 'C', 4, '1545', 'return i;')
(-563, -1, '-', 0, '-1536', 'if (ctx->nb_registered_frames == FF_ARRAY_ELEMS(ctx->registered_frames))')
(-575, -1, '-', 0, '-1543', 'ctx->registered_frames[i].regptr = NULL')
---------------------------
(-181, -346, 'CDG', 1)
(-401, -344, 'CDG', 1)
(-401, -346, 'CDG', 1)
(-406, -346, 'DDGres', 1)
(-143, -379, 'DDGavctx', 1)
(-401, -406, 'CDG', 1)
(-374, -401, 'CDG', 1)
(-181, -401, 'DDGNV_ENC_SUCCESS', 1)
(-401, -259, 'CDG', 1)
(-2, -357, 'DDGtmpoutsurf', 1)
(-181, -350, 'CDG', 1)
(-131, -374, 'DDGNV_ENC_SUCCESS', 1)
(-143, -406, 'DDGavctx', 1)
(-209, -357, 'CDG', 1)
(-386, -413, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].regptr', 1)
(-8, -357, 'DDGctx', 1)
(-374, -386, 'CDG', 1)
(-374, -339, 'CDG', 1)
(-209, -357, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', 1)
(-350, -346, 'DDGres', 1)
(-374, -379, 'CDG', 1)
(-357, -386, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].in_map.mappedResource', 1)
(-198, -386, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', 1)
(-401, -406, 'DDGnv_status', 1)
(-401, -413, 'CDG', 1)
(-198, -357, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', 1)
(-401, -250, 'CDG', 1)
(-181, -339, 'CDG', 1)
(-401, -339, 'CDG', 1)
(-181, -350, 'DDGnv_status', 1)
(-2, -386, 'DDGtmpoutsurf', 1)
(-374, -401, 'DDGNV_ENC_SUCCESS', 1)
(-143, -350, 'DDGavctx', 1)
(-181, -344, 'CDG', 1)
(-181, -374, 'DDGNV_ENC_SUCCESS', 1)
(-209, -374, 'CDG', 1)
(-401, -254, 'CDG', 1)
(-357, -374, 'DDGnv_status', 1)
(-374, -344, 'CDG', 1)
(-8, -386, 'DDGctx', 1)
(-374, -346, 'CDG', 1)
(-379, -346, 'DDGres', 1)
(-131, -401, 'DDGNV_ENC_SUCCESS', 1)
(-209, -386, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].mapped', 1)
(-374, -379, 'DDGnv_status', 1)
(-181, -185, 'CDG', 1)
(-357, -413, 'DDGctx->registered_frames[tmpoutsurf->reg_idx].in_map.mappedResource', 1)
(-386, -401, 'DDGnv_status', 1)
(-448, -560, 'DDGavctx', 1)
(-502, -537, 'CDG', 1)
(-537, -559, 'DDGctx->registered_frames[i].regptr', 1)
(-448, -554, 'DDGavctx', 1)
(-550, -554, 'DDGnv_status', 1)
(-480, -560, 'CDG', 1)
(-480, -561, 'CDG', 1)
(-502, -550, 'CDG', 1)
(-537, -550, 'DDGnv_status', 1)
(-550, -559, 'CDG', 1)
(-502, -537, 'DDGctx->registered_frames[i].regptr', 1)
(-502, -519, 'CDG', 1)
(-550, -554, 'CDG', 1)
(-550, -519, 'CDG', 1)
(-492, -537, 'DDGctx->registered_frames[i].mapped', 1)
===========================
(-143, 0, 'D', 9, '1786', 'if (res = ff_alloc_packet2(avctx, pkt, lock_params.bitstreamSizeInBytes,0))')
(-412, 1, '-', 0, '+1811', 'goto error;')
(-250, 0, 'C', 10, '1819', 'av_frame_unref(tmpoutsurf->in_ref)')
(-356, 1, '-', 0, '+1796', 'goto error;')
(-291, 0, 'D', 45, '1840', 'av_log(avctx, AV_LOG_ERROR, "Unknown picture type encountered, expect the output to be broken.\\n")')
(-344, 0, 'C', 58, '1867', 'av_free(slice_offsets)')
(-385, 1, '-', 0, '+1806', 'goto error;')
(-374, 1, '-', 0, '+1804', 'if (nv_status != NV_ENC_SUCCESS)')
(-346, 0, 'C', 59, '1869', 'return res;')
(-357, 1, '-', 0, '+1803', 'nv_status = p_nvenc->nvEncUnmapInputResource(ctx->nvencoder, ctx->registered_frames[tmpoutsurf->reg_idx].in_map.mappedResource)')
(-406, 1, '-', 0, '+1810', 'res = nvenc_print_error(avctx, nv_status, "Failed unregistering input resource")')
(-185, 0, 'D', 5, '1800', 'if (avctx->pix_fmt == AV_PIX_FMT_CUDA || avctx->pix_fmt == AV_PIX_FMT_D3D11)')
(-322, 0, 'D', 60, '1855', 'res = nvenc_set_timestamp(avctx, &lock_params, pkt)')
(-198, 0, 'D', 2, '1801', 'ctx->registered_frames[tmpoutsurf->reg_idx].mapped -= 1')
(-8, 0, 'D', 60, '1743', '*ctx = avctx->priv_data')
(-254, 0, 'C', 12, '1821', 'tmpoutsurf->input_surface = NULL')
(-401, 1, '-', 0, '+1809', 'if (nv_status != NV_ENC_SUCCESS)')
(-2, 0, 'D', 62, '1741', 'process_output_surface (AVCodecContext *avctx,AVPacket *pkt,NvencSurface *tmpoutsurf)')
(-339, 0, 'C', 55, '1864', 'timestamp_queue_dequeue(ctx->timestamp_list)')
(-131, 0, 'D', 23, '1781', 'if (nv_status != NV_ENC_SUCCESS)')
(-181, 0, 'D', 1, '1794', 'if (nv_status != NV_ENC_SUCCESS)')
(-379, 1, '-', 0, '+1805', 'res = nvenc_print_error(avctx, nv_status, "Failed unmapping input resource")')
(-259, 0, 'C', 15, '1824', 'switch (lock_params.pictureType)')
(-386, 1, '-', 0, '+1808', 'nv_status = p_nvenc->nvEncUnregisterResource(ctx->nvencoder, ctx->registered_frames[tmpoutsurf->reg_idx].regptr)')
(-350, 1, '-', 0, '+1795', 'res = nvenc_print_error(avctx, nv_status, "Failed unlocking bitstream buffer, expect the gates of mordor to open")')
(-303, 0, 'D', 53, '1848', 'avctx->coded_frame->pict_type = pict_type')
(-209, 0, 'C', 1, '1802', 'if (ctx->registered_frames[tmpoutsurf->reg_idx].mapped == 0)')
(-413, 1, '-', 0, '+1813', 'ctx->registered_frames[tmpoutsurf->reg_idx].regptr = NULL')
(-537, 1, '-', 0, '+1540', 'nv_status = p_nvenc->nvEncUnregisterResource(ctx->nvencoder, ctx->registered_frames[i].regptr)')
(-550, 1, '-', 0, '+1541', 'if (nv_status != NV_ENC_SUCCESS)')
(-502, 0, 'C', 1, '1539', 'if (ctx->registered_frames[i].regptr)')
(-480, 0, 'C', 15, '1537', 'for (i = 0; i < ctx->nb_registered_frames; i++)')
(-448, 0, 'D', 15, '1527', 'nvenc_find_free_reg_resource (AVCodecContext *avctx)')
(-492, 0, 'C', 2, '1538', 'if (!ctx->registered_frames[i].mapped)')
(-536, 1, '-', 0, '+1536', 'if (ctx->nb_registered_frames == FF_ARRAY_ELEMS(ctx->registered_frames))')
(-560, 1, '-', 0, '+1552', 'av_log(avctx, AV_LOG_ERROR, "Too many registered CUDA frames\\n")')
(-561, 1, '-', 0, '+1553', 'return AVERROR(ENOMEM);')
(-559, 1, '-', 0, '+1543', 'ctx->registered_frames[i].regptr = NULL')
(-519, 0, 'C', 4, '1545', 'return i;')
(-554, 1, '-', 0, '+1542', 'return nvenc_print_error(avctx, nv_status, "Failed unregistering unused input resource");')
