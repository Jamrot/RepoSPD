(-28, -47, 'DDG', 1)
(-5, -16, 'DDG', 1)
(-23, -28, 'DDG', 1)
(-16, -23, 'DDG', 1)
(-28, -35, 'DDG', 1)
(-42, -47, 'DDG', 1)
(-16, -35, 'DDG', 1)
(-16, -35, 'DDG', 1)
(-35, -42, 'DDG', 1)
(-16, -35, 'DDG', 1)
(-23, -28, 'DDG', 1)
(-28, -47, 'DDG', 1)
(-5, -54, 'DDG', -1)
(-16, -23, 'DDG', 1)
(-16, -35, 'DDG', 1)
(-28, -47, 'DDG', 1)
(-42, -47, 'DDG', 1)
(-35, -42, 'DDG', 1)
(-23, -42, 'DDG', 1)
(-28, -47, 'DDG', 1)
(-123, -152, 'DDG', 1)
(-110, -152, 'DDG', 1)
(-83, -94, 'DDG', 1)
(-163, -174, 'DDG', 1)
(-110, -152, 'DDG', 1)
(-152, -174, 'DDG', 1)
(-163, -187, 'DDG', 1)
(-152, -174, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-152, -187, 'DDG', 1)
(-187, -200, 'DDG', 1)
(-123, -152, 'DDG', 1)
(-152, -187, 'DDG', 1)
(-163, -174, 'DDG', 1)
(-99, -110, 'DDG', 1)
(-123, -136, 'DDG', 1)
(-110, -136, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-163, -174, 'DDG', 1)
(-163, -200, 'DDG', 1)
(-174, -200, 'DDG', 1)
(-152, -163, 'DDG', 1)
(-99, -123, 'DDG', 1)
(-99, -123, 'DDG', 1)
(-99, -110, 'DDG', 1)
(-136, -147, 'DDG', 1)
(-83, -123, 'DDG', 1)
(-83, -110, 'DDG', 1)
(-83, -94, 'DDG', 1)
(-123, -136, 'DDG', 1)
(-99, -136, 'DDG', 1)
(-99, -110, 'DDG', 1)
(-110, -136, 'DDG', 1)
(-123, -136, 'DDG', 1)
(-123, -152, 'DDG', 1)
(-152, -187, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-147, -163, 'DDG', 1)
(-163, -174, 'DDG', 1)
(-187, -200, 'DDG', 1)
(-174, -200, 'DDG', 1)
(-187, -200, 'DDG', 1)
(-163, -200, 'DDG', 1)
(-110, -136, 'DDG', 1)
(-174, -200, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-99, -110, 'DDG', 1)
(-147, -152, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-83, -123, 'DDG', 1)
(-99, -123, 'DDG', 1)
(-152, -187, 'DDG', 1)
(-94, -152, 'DDG', 1)
(-123, -152, 'DDG', 1)
(-163, -187, 'DDG', 1)
(-163, -187, 'DDG', 1)
(-174, -200, 'DDG', 1)
(-110, -136, 'DDG', 1)
(-83, -110, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-83, -110, 'DDG', 1)
(-64, -211, 'DDG', -1)
(-94, -147, 'DDG', 1)
(-110, -152, 'DDG', 1)
(-152, -174, 'DDG', 1)
(-94, -99, 'DDG', 1)
(-136, -147, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-83, -123, 'DDG', 1)
(-99, -123, 'DDG', 1)
(-83, -110, 'DDG', 1)
(-99, -136, 'DDG', 1)
(-163, -187, 'DDG', 1)
(-83, -123, 'DDG', 1)
(-110, -152, 'DDG', 1)
(-64, -83, 'DDG', 1)
(-187, -200, 'DDG', 1)
(-123, -136, 'DDG', 1)
(-152, -174, 'DDG', 1)
(-263, -298, 'DDG', 1)
(-248, -313, 'DDG', 1)
(-256, -279, 'DDG', 1)
(-268, -291, 'DDG', 1)
(-298, -338, 'DDG', 1)
(-268, -287, 'DDG', 1)
(-256, -263, 'DDG', 1)
(-263, -268, 'DDG', 1)
(-283, -298, 'DDG', 1)
(-291, -313, 'DDG', 1)
(-298, -321, 'DDG', 1)
(-221, -345, 'DDG', -1)
(-279, -291, 'DDG', 1)
(-313, -325, 'DDG', 1)
(-287, -298, 'DDG', 1)
(-283, -298, 'DDG', 1)
(-291, -309, 'DDG', 1)
(-275, -325, 'DDG', 1)
(-291, -298, 'DDG', 1)
(-248, -317, 'DDG', 1)
(-248, -321, 'DDG', 1)
(-291, -309, 'DDG', 1)
(-325, -338, 'DDG', 1)
(-325, -338, 'DDG', 1)
(-275, -291, 'DDG', 1)
(-256, -279, 'DDG', 1)
(-279, -325, 'DDG', 1)
(-268, -283, 'DDG', 1)
(-268, -283, 'DDG', 1)
(-221, -256, 'DDG', 1)
(-298, -317, 'DDG', 1)
(-242, -283, 'DDG', 1)
(-298, -317, 'DDG', 1)
(-256, -275, 'DDG', 1)
(-321, -325, 'DDG', 1)
(-242, -279, 'DDG', 1)
(-317, -325, 'DDG', 1)
(-248, -309, 'DDG', 1)
(-291, -298, 'DDG', 1)
(-275, -291, 'DDG', 1)
(-263, -268, 'DDG', 1)
(-256, -263, 'DDG', 1)
(-242, -287, 'DDG', 1)
(-309, -325, 'DDG', 1)
(-298, -321, 'DDG', 1)
(-279, -291, 'DDG', 1)
(-291, -338, 'DDG', 1)
(-242, -275, 'DDG', 1)
(-256, -275, 'DDG', 1)
(-268, -287, 'DDG', 1)
(-291, -313, 'DDG', 1)
(-325, -338, 'DDG', 1)
(-283, -325, 'DDG', 1)
(-287, -298, 'DDG', 1)
(-325, -338, 'DDG', 1)
(-287, -325, 'DDG', 1)
(-385, -412, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-374, -385, 'DDG', 1)
(-412, -417, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-385, -390, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-401, -412, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-390, -401, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-401, -412, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-355, -374, 'DDG', 1)
(-412, -417, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-374, -385, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-355, -428, 'DDG', -1)
(-390, -417, 'DDG', 1)
(-385, -390, 'DDG', 1)
(-464, -482, 'DDG', 1)
(-438, -451, 'DDG', 1)
(-451, -458, 'DDG', 1)
(-446, -471, 'DDG', 1)
(-464, -471, 'DDG', 1)
(-458, -464, 'DDG', 1)
(-464, -471, 'DDG', 1)
(-451, -458, 'DDG', 1)
(-438, -491, 'DDG', -1)
(-458, -477, 'DDG', 1)
(-458, -464, 'DDG', 1)
(-451, -464, 'DDG', 1)
(-458, -464, 'DDG', 1)
(-464, -482, 'DDG', 1)
(-464, -471, 'DDG', 1)
(-451, -458, 'DDG', 1)
(-446, -458, 'DDG', 1)
(-471, -477, 'DDG', 1)
(-477, -482, 'DDG', 1)
(-464, -471, 'DDG', 1)
(-458, -464, 'DDG', 1)
(-451, -458, 'DDG', 1)
(-1092, -1080, 'DDGout2', -1)
(-1027, -1051, 'DDGout5', -1)
(-1051, -1027, 'DDGout5', -1)
(-1064, -1071, 'CDG', -1)
(-988, -999, 'DDGheight', -1)
(-1064, -1071, 'DDGheight', -1)
(-1080, -1092, 'DDGout3', -1)
(-1071, -1092, 'CDG', -1)
(-1071, -1080, 'CDG', -1)
(-1039, -1015, 'DDGout1', -1)
(-1080, -1092, 'DDGout0', -1)
(-1015, -1039, 'DDGout2', -1)
(-1015, -1022, 'DDGsrc', -1)
(-999, -1064, 'CDG', -1)
(-1080, -1092, 'DDGout1', -1)
(-1006, -1046, 'CDG', -1)
(-1006, -1034, 'CDG', -1)
(-1027, -1051, 'DDGout6', -1)
(-1034, -1015, 'DDGsrc', -1)
(-1039, -1015, 'DDGout2', -1)
(-1022, -1027, 'DDGsrc', -1)
(-1051, -1058, 'DDGdst', -1)
(-1039, -1046, 'DDGdst', -1)
(-999, -1064, 'DDGheight', -1)
(-1051, -1058, 'DDGdst_stride', -1)
(-1046, -1051, 'DDGdst', -1)
(-1022, -1027, 'DDGsrc_stride', -1)
(-1006, -1022, 'CDG', -1)
(-1046, -1051, 'DDGdst_stride', -1)
(-1051, -1027, 'DDGout6', -1)
(-1080, -1092, 'DDGout2', -1)
(-1015, -1022, 'DDGsrc_stride', -1)
(-1058, -1039, 'DDGdst', -1)
(-1087, -1080, 'DDGsrc', -1)
(-1034, -1015, 'DDGsrc_stride', -1)
(-1058, -1039, 'DDGdst_stride', -1)
(-1092, -1080, 'DDGout3', -1)
(-1039, -1046, 'DDGdst_stride', -1)
(-1071, -1087, 'CDG', -1)
(-1092, -1080, 'DDGout0', -1)
(-1071, -1099, 'CDG', -1)
(-1006, -1058, 'CDG', -1)
(-1080, -1087, 'DDGsrc', -1)
(-1092, -1080, 'DDGout1', -1)
(-1027, -1034, 'DDGsrc', -1)
(-1092, -1099, 'DDGdst', -1)
(-1080, -1087, 'DDGsrc_stride', -1)
(-1006, -1051, 'CDG', -1)
(-1099, -1092, 'DDGdst', -1)
(-1087, -1080, 'DDGsrc_stride', -1)
(-1027, -1051, 'DDGout4', -1)
(-999, -1006, 'CDG', -1)
(-1034, -1022, 'DDGsrc_stride', -1)
(-999, -1006, 'DDGheight', -1)
(-1027, -1051, 'DDGout7', -1)
(-1051, -1027, 'DDGout7', -1)
(-1015, -1039, 'DDGout3', -1)
(-1039, -1015, 'DDGout0', -1)
(-1027, -1034, 'DDGsrc_stride', -1)
(-1015, -1039, 'DDGout0', -1)
(-1006, -1039, 'CDG', -1)
(-1092, -1099, 'DDGdst_stride', -1)
(-1006, -1027, 'CDG', -1)
(-1058, -1046, 'DDGdst_stride', -1)
(-1099, -1092, 'DDGdst_stride', -1)
(-1051, -1027, 'DDGout4', -1)
(-1015, -1039, 'DDGout1', -1)
(-1006, -1015, 'CDG', -1)
(-1039, -1015, 'DDGout3', -1)
(-1159, -1165, 'DDGtp2', -1)
(-1165, -1172, 'DDGtp0', -1)
(-1172, -1178, 'DDGtp3', -1)
(-1152, -1159, 'DDGtp2', -1)
(-1220, -1226, 'DDGtp0', -1)
(-1165, -1202, 'DDGdst', -1)
(-1129, -1208, 'CDG', -1)
(-1165, -1172, 'DDGtp3', -1)
(-1172, -1178, 'DDGtp1', -1)
(-1146, -1152, 'DDGtp2', -1)
(-1220, -1226, 'DDGtp3', -1)
(-1134, -1146, 'DDGtp2', -1)
(-1165, -1172, 'DDGtp1', -1)
(-1195, -1202, 'DDGdst0', -1)
(-1124, -1172, 'DDGdst0', -1)
(-1213, -1220, 'DDGtp2', -1)
(-1146, -1195, 'DDGsrc0', -1)
(-1129, -1202, 'CDG', -1)
(-1220, -1226, 'DDGtp1', -1)
(-1226, -1233, 'DDGtp2', -1)
(-1165, -1178, 'DDGdst', -1)
(-1239, -1244, 'DDGdst0', -1)
(-1208, -1226, 'CDG', -1)
(-1146, -1152, 'DDGtp3', -1)
(-1134, -1146, 'DDGtp3', -1)
(-1129, -1146, 'CDG', -1)
(-1178, -1189, 'DDGtp3', -1)
(-1124, -1146, 'DDGsrc0', -1)
(-1146, -1152, 'DDGtp1', -1)
(-1226, -1244, 'DDGdst', -1)
(-1159, -1165, 'DDGtp0', -1)
(-1134, -1146, 'DDGtp1', -1)
(-1159, -1195, 'DDGsrc1', -1)
(-1226, -1233, 'DDGtp3', -1)
(-1129, -1165, 'CDG', -1)
(-1213, -1220, 'DDGtp1', -1)
(-1146, -1152, 'DDGtp0', -1)
(-1226, -1233, 'DDGtp1', -1)
(-1152, -1159, 'DDGtp3', -1)
(-1159, -1165, 'DDGtp1', -1)
(-1208, -1244, 'CDG', -1)
(-1152, -1159, 'DDGtp1', -1)
(-1129, -1195, 'CDG', -1)
(-1134, -1146, 'DDGtp0', -1)
(-1226, -1233, 'DDGtp0', -1)
(-1141, -1152, 'DDGsrc', -1)
(-1129, -1208, 'DDGheight', -1)
(-1208, -1233, 'CDG', -1)
(-1172, -1178, 'DDGtp2', -1)
(-1208, -1220, 'CDG', -1)
(-1213, -1220, 'DDGtp3', -1)
(-1220, -1239, 'DDGsrc0', -1)
(-1152, -1159, 'DDGtp0', -1)
(-1178, -1202, 'DDGdst_stride', -1)
(-1165, -1172, 'DDGtp2', -1)
(-1159, -1165, 'DDGtp3', -1)
(-1111, -1129, 'DDGheight', -1)
(-1220, -1226, 'DDGtp2', -1)
(-1129, -1152, 'CDG', -1)
(-1129, -1141, 'CDG', -1)
(-1208, -1213, 'CDG', -1)
(-1178, -1189, 'DDGtp1', -1)
(-1208, -1239, 'CDG', -1)
(-1189, -1195, 'DDGdst1', -1)
(-1172, -1195, 'DDGdst0', -1)
(-1195, -1202, 'DDGdst1', -1)
(-1178, -1189, 'DDGtp0', -1)
(-1213, -1220, 'DDGtp0', -1)
(-1134, -1141, 'DDGsrc', -1)
(-1141, -1152, 'DDGsrc_stride', -1)
(-1124, -1159, 'DDGsrc1', -1)
(-1129, -1134, 'CDG', -1)
(-1124, -1220, 'DDGsrc0', -1)
(-1233, -1239, 'DDGdst0', -1)
(-1129, -1172, 'CDG', -1)
(-1226, -1244, 'DDGdst_stride', -1)
(-1124, -1233, 'DDGdst0', -1)
(-1134, -1141, 'DDGsrc_stride', -1)
(-1178, -1189, 'DDGtp2', -1)
(-1129, -1159, 'CDG', -1)
(-1124, -1189, 'DDGdst1', -1)
(-1165, -1178, 'DDGdst_stride', -1)
(-1129, -1178, 'CDG', -1)
(-1172, -1178, 'DDGtp0', -1)
(-1129, -1189, 'CDG', -1)
(-1286, -1353, 'CDG', -1)
(-1395, -1426, 'CDG', -1)
(-1323, -1335, 'DDGtp3', -1)
(-1279, -1286, 'DDGheight', -1)
(-1369, -1331, 'DDGsrc3', -1)
(-1286, -1307, 'CDG', -1)
(-1295, -1323, 'DDGtp2', -1)
(-1342, -1361, 'DDGtp4', -1)
(-1335, -1353, 'DDGtp0', -1)
(-1369, -1382, 'DDGdst2', -1)
(-1430, -1437, 'DDGdst1', -1)
(-1335, -1342, 'DDGdst', -1)
(-1400, -1407, 'DDGtp0', -1)
(-1314, -1302, 'DDGsrc_stride', -1)
(-1395, -1415, 'CDG', -1)
(-1327, -1342, 'DDGtp4', -1)
(-1389, -1335, 'DDGdst_stride', -1)
(-1415, -1437, 'DDGdst', -1)
(-1395, -1407, 'CDG', -1)
(-1411, -1430, 'DDGsrc1', -1)
(-1286, -1389, 'CDG', -1)
(-1395, -1422, 'CDG', -1)
(-1365, -1307, 'DDGtp7', -1)
(-1400, -1407, 'DDGtp1', -1)
(-1430, -1437, 'DDGdst0', -1)
(-1279, -1286, 'CDG', -1)
(-1307, -1331, 'DDGtp6', -1)
(-1286, -1319, 'CDG', -1)
(-1357, -1369, 'DDGdst1', -1)
(-1286, -1331, 'CDG', -1)
(-1307, -1314, 'DDGsrc_stride', -1)
(-1319, -1369, 'DDGsrc0', -1)
(-1411, -1415, 'DDGtp2', -1)
(-1415, -1422, 'DDGtp1', -1)
(-1353, -1295, 'DDGtp0', -1)
(-1295, -1319, 'DDGtp0', -1)
(-1361, -1307, 'DDGtp4', -1)
(-1369, -1382, 'DDGdst1', -1)
(-1286, -1369, 'CDG', -1)
(-1369, -1327, 'DDGsrc2', -1)
(-1335, -1357, 'DDGtp3', -1)
(-1407, -1415, 'DDGtp0', -1)
(-1382, -1389, 'DDGdst_stride', -1)
(-1369, -1323, 'DDGsrc1', -1)
(-1286, -1335, 'CDG', -1)
(-1353, -1295, 'DDGtp1', -1)
(-1361, -1369, 'DDGdst2', -1)
(-1382, -1357, 'DDGdst1', -1)
(-1382, -1365, 'DDGdst3', -1)
(-1415, -1422, 'DDGtp0', -1)
(-1407, -1415, 'DDGtp1', -1)
(-1286, -1327, 'CDG', -1)
(-1395, -1400, 'CDG', -1)
(-1295, -1302, 'DDGsrc', -1)
(-1286, -1314, 'CDG', -1)
(-1295, -1302, 'DDGsrc_stride', -1)
(-1357, -1295, 'DDGtp2', -1)
(-1295, -1323, 'DDGtp3', -1)
(-1353, -1369, 'DDGdst0', -1)
(-1335, -1382, 'DDGdst', -1)
(-1319, -1335, 'DDGtp0', -1)
(-1400, -1411, 'DDGtp2', -1)
(-1365, -1307, 'DDGtp6', -1)
(-1382, -1361, 'DDGdst2', -1)
(-1323, -1369, 'DDGsrc1', -1)
(-1286, -1357, 'CDG', -1)
(-1395, -1430, 'CDG', -1)
(-1415, -1426, 'DDGtp2', -1)
(-1327, -1369, 'DDGsrc2', -1)
(-1389, -1335, 'DDGdst', -1)
(-1323, -1335, 'DDGtp2', -1)
(-1319, -1335, 'DDGtp1', -1)
(-1331, -1369, 'DDGsrc3', -1)
(-1382, -1389, 'DDGdst', -1)
(-1302, -1307, 'DDGsrc', -1)
(-1369, -1382, 'DDGdst0', -1)
(-1369, -1382, 'DDGdst3', -1)
(-1335, -1342, 'DDGdst_stride', -1)
(-1395, -1437, 'CDG', -1)
(-1286, -1361, 'CDG', -1)
(-1369, -1319, 'DDGsrc0', -1)
(-1411, -1415, 'DDGtp3', -1)
(-1286, -1342, 'CDG', -1)
(-1361, -1307, 'DDGtp5', -1)
(-1314, -1295, 'DDGsrc', -1)
(-1307, -1314, 'DDGsrc', -1)
(-1286, -1365, 'CDG', -1)
(-1342, -1361, 'DDGtp5', -1)
(-1260, -1279, 'DDGheight', -1)
(-1327, -1342, 'DDGtp5', -1)
(-1426, -1430, 'DDGdst1', -1)
(-1342, -1365, 'DDGtp7', -1)
(-1422, -1430, 'DDGdst0', -1)
(-1342, -1382, 'DDGdst_stride', -1)
(-1407, -1430, 'DDGsrc0', -1)
(-1307, -1327, 'DDGtp5', -1)
(-1286, -1382, 'CDG', -1)
(-1335, -1357, 'DDGtp2', -1)
(-1342, -1365, 'DDGtp6', -1)
(-1307, -1327, 'DDGtp4', -1)
(-1295, -1319, 'DDGtp1', -1)
(-1365, -1369, 'DDGdst3', -1)
(-1331, -1342, 'DDGtp7', -1)
(-1286, -1295, 'CDG', -1)
(-1302, -1307, 'DDGsrc_stride', -1)
(-1415, -1437, 'DDGdst_stride', -1)
(-1286, -1323, 'CDG', -1)
(-1357, -1295, 'DDGtp3', -1)
(-1307, -1331, 'DDGtp7', -1)
(-1400, -1411, 'DDGtp3', -1)
(-1382, -1353, 'DDGdst0', -1)
(-1279, -1395, 'CDG', -1)
(-1335, -1353, 'DDGtp1', -1)
(-1279, -1395, 'DDGheight', -1)
(-1331, -1342, 'DDGtp6', -1)
(-1395, -1411, 'CDG', -1)
(-1415, -1426, 'DDGtp3', -1)
(-1314, -1295, 'DDGsrc_stride', -1)
(-1286, -1302, 'CDG', -1)
(-1689, -1705, 'CDG', -1)
(-1541, -1552, 'DDGdst', -1)
(-1689, -1717, 'CDG', -1)
(-1659, -1670, 'DDGsrc2', -1)
(-1611, -1627, 'DDGsrc2', -1)
(-1698, -1710, 'DDGsrc0', -1)
(-1493, -1509, 'DDGsrc1', -1)
(-1622, -1643, 'DDGdst', -1)
(-1638, -1659, 'DDGsrc', -1)
(-1558, -1670, 'CDG', -1)
(-1579, -1595, 'DDGsrc0', -1)
(-1710, -1698, 'DDGsrc0', -1)
(-1558, -1606, 'CDG', -1)
(-1590, -1622, 'DDGdst_stride', -1)
(-1627, -1643, 'DDGsrc7', -1)
(-1525, -1536, 'DDGsrc', -1)
(-1611, -1622, 'DDGdst', -1)
(-1698, -1710, 'DDGsrc1', -1)
(-1488, -1520, 'CDG', -1)
(-1509, -1525, 'DDGsrc2', -1)
(-1558, -1611, 'CDG', -1)
(-1525, -1536, 'DDGsrc_stride', -1)
(-1590, -1611, 'DDGdst', -1)
(-1654, -1670, 'DDGdst', -1)
(-1627, -1643, 'DDGsrc4', -1)
(-1606, -1638, 'DDGsrc_stride', -1)
(-1659, -1670, 'DDGsrc7', -1)
(-1563, -1574, 'DDGsrc', -1)
(-1611, -1627, 'DDGsrc7', -1)
(-1622, -1654, 'DDGdst_stride', -1)
(-1558, -1590, 'CDG', -1)
(-1659, -1670, 'DDGsrc4', -1)
(-1509, -1520, 'DDGdst_stride', -1)
(-1465, -1476, 'DDGsrc2', -1)
(-1710, -1698, 'DDGsrc2', -1)
(-1627, -1643, 'DDGsrc3', -1)
(-1488, -1509, 'CDG', -1)
(-1558, -1622, 'CDG', -1)
(-1558, -1638, 'CDG', -1)
(-1509, -1525, 'DDGsrc7', -1)
(-1574, -1606, 'DDGsrc_stride', -1)
(-1643, -1659, 'DDGsrc5', -1)
(-1659, -1670, 'DDGsrc3', -1)
(-1579, -1590, 'DDGdst_stride', -1)
(-1509, -1525, 'DDGsrc4', -1)
(-1541, -1552, 'DDGdst_stride', -1)
(-1595, -1606, 'DDGsrc_stride', -1)
(-1643, -1654, 'DDGdst', -1)
(-1558, -1563, 'CDG', -1)
(-1558, -1579, 'CDG', -1)
(-1717, -1710, 'DDGdst_stride', -1)
(-1465, -1476, 'DDGsrc6', -1)
(-1682, -1689, 'DDGheight', -1)
(-1611, -1627, 'DDGsrc5', -1)
(-1460, -1488, 'DDGheight', -1)
(-1590, -1654, 'DDGdst_stride', -1)
(-1493, -1509, 'DDGsrc3', -1)
(-1579, -1595, 'DDGsrc4', -1)
(-1643, -1659, 'DDGsrc7', -1)
(-1574, -1595, 'DDGsrc_stride', -1)
(-1488, -1493, 'CDG', -1)
(-1643, -1659, 'DDGsrc0', -1)
(-1509, -1525, 'DDGsrc3', -1)
(-1705, -1698, 'DDGsrc_stride', -1)
(-1595, -1611, 'DDGsrc4', -1)
(-1698, -1710, 'DDGsrc3', -1)
(-1611, -1627, 'DDGsrc0', -1)
(-1493, -1509, 'DDGsrc2', -1)
(-1643, -1659, 'DDGsrc1', -1)
(-1579, -1595, 'DDGsrc3', -1)
(-1525, -1541, 'DDGsrc1', -1)
(-1488, -1558, 'CDG', -1)
(-1710, -1698, 'DDGsrc3', -1)
(-1558, -1659, 'CDG', -1)
(-1595, -1611, 'DDGsrc3', -1)
(-1611, -1627, 'DDGsrc1', -1)
(-1698, -1710, 'DDGsrc2', -1)
(-1595, -1611, 'DDGsrc5', -1)
(-1563, -1579, 'DDGsrc2', -1)
(-1579, -1595, 'DDGsrc2', -1)
(-1717, -1710, 'DDGdst', -1)
(-1493, -1504, 'DDGsrc', -1)
(-1710, -1717, 'DDGdst_stride', -1)
(-1627, -1643, 'DDGsrc5', -1)
(-1460, -1488, 'CDG', -1)
(-1493, -1509, 'DDGsrc4', -1)
(-1643, -1654, 'DDGdst_stride', -1)
(-1558, -1682, 'CDG', -1)
(-1574, -1595, 'DDGsrc', -1)
(-1595, -1606, 'DDGsrc', -1)
(-1595, -1611, 'DDGsrc0', -1)
(-1558, -1682, 'DDGheight', -1)
(-1595, -1611, 'DDGsrc7', -1)
(-1525, -1541, 'DDGsrc6', -1)
(-1659, -1670, 'DDGsrc5', -1)
(-1705, -1698, 'DDGsrc', -1)
(-1563, -1579, 'DDGsrc6', -1)
(-1520, -1541, 'DDGdst_stride', -1)
(-1488, -1504, 'CDG', -1)
(-1465, -1476, 'DDGsrc7', -1)
(-1611, -1627, 'DDGsrc6', -1)
(-1579, -1595, 'DDGsrc7', -1)
(-1574, -1638, 'DDGsrc_stride', -1)
(-1465, -1476, 'DDGsrc4', -1)
(-1525, -1541, 'DDGsrc0', -1)
(-1509, -1525, 'DDGsrc5', -1)
(-1460, -1476, 'CDG', -1)
(-1590, -1611, 'DDGdst_stride', -1)
(-1509, -1520, 'DDGdst', -1)
(-1689, -1710, 'CDG', -1)
(-1488, -1536, 'CDG', -1)
(-1627, -1643, 'DDGsrc1', -1)
(-1488, -1552, 'CDG', -1)
(-1465, -1476, 'DDGsrc3', -1)
(-1563, -1579, 'DDGsrc3', -1)
(-1493, -1509, 'DDGsrc5', -1)
(-1595, -1611, 'DDGsrc6', -1)
(-1627, -1638, 'DDGsrc_stride', -1)
(-1465, -1476, 'DDGsrc5', -1)
(-1659, -1670, 'DDGsrc1', -1)
(-1611, -1627, 'DDGsrc3', -1)
(-1525, -1541, 'DDGsrc2', -1)
(-1643, -1659, 'DDGsrc6', -1)
(-1563, -1579, 'DDGsrc5', -1)
(-1488, -1525, 'CDG', -1)
(-1488, -1541, 'CDG', -1)
(-1493, -1504, 'DDGsrc_stride', -1)
(-1698, -1705, 'DDGsrc', -1)
(-1493, -1509, 'DDGsrc0', -1)
(-1493, -1509, 'DDGsrc7', -1)
(-1558, -1654, 'CDG', -1)
(-1682, -1689, 'CDG', -1)
(-1460, -1465, 'CDG', -1)
(-1465, -1476, 'DDGsrc0', -1)
(-1509, -1525, 'DDGsrc1', -1)
(-1627, -1643, 'DDGsrc6', -1)
(-1449, -1460, 'DDGheight', -1)
(-1520, -1541, 'DDGdst', -1)
(-1622, -1643, 'DDGdst_stride', -1)
(-1595, -1611, 'DDGsrc1', -1)
(-1698, -1705, 'DDGsrc_stride', -1)
(-1558, -1595, 'CDG', -1)
(-1689, -1698, 'CDG', -1)
(-1563, -1579, 'DDGsrc0', -1)
(-1563, -1579, 'DDGsrc7', -1)
(-1525, -1541, 'DDGsrc7', -1)
(-1504, -1525, 'DDGsrc', -1)
(-1606, -1627, 'DDGsrc', -1)
(-1643, -1659, 'DDGsrc4', -1)
(-1659, -1670, 'DDGsrc6', -1)
(-1638, -1659, 'DDGsrc_stride', -1)
(-1611, -1622, 'DDGdst_stride', -1)
(-1563, -1579, 'DDGsrc1', -1)
(-1465, -1476, 'DDGsrc1', -1)
(-1654, -1670, 'DDGdst_stride', -1)
(-1579, -1595, 'DDGsrc1', -1)
(-1627, -1643, 'DDGsrc0', -1)
(-1563, -1579, 'DDGsrc4', -1)
(-1525, -1541, 'DDGsrc4', -1)
(-1558, -1643, 'CDG', -1)
(-1488, -1558, 'DDGheight', -1)
(-1710, -1698, 'DDGsrc1', -1)
(-1504, -1536, 'DDGsrc_stride', -1)
(-1504, -1525, 'DDGsrc_stride', -1)
(-1606, -1627, 'DDGsrc_stride', -1)
(-1558, -1574, 'CDG', -1)
(-1611, -1627, 'DDGsrc4', -1)
(-1520, -1552, 'DDGdst_stride', -1)
(-1659, -1670, 'DDGsrc0', -1)
(-1493, -1509, 'DDGsrc6', -1)
(-1643, -1659, 'DDGsrc3', -1)
(-1509, -1525, 'DDGsrc6', -1)
(-1595, -1611, 'DDGsrc2', -1)
(-1525, -1541, 'DDGsrc3', -1)
(-1710, -1717, 'DDGdst', -1)
(-1563, -1574, 'DDGsrc_stride', -1)
(-1525, -1541, 'DDGsrc5', -1)
(-1627, -1638, 'DDGsrc', -1)
(-1627, -1643, 'DDGsrc2', -1)
(-1579, -1595, 'DDGsrc5', -1)
(-1643, -1659, 'DDGsrc2', -1)
(-1558, -1627, 'CDG', -1)
(-1509, -1525, 'DDGsrc0', -1)
(-1579, -1595, 'DDGsrc6', -1)
(-1579, -1590, 'DDGdst', -1)
(-1817, -1828, 'DDGdst', -1)
(-1764, -1791, 'DDGsrc2', -1)
(-1817, -1780, 'DDGdst3', -1)
(-1841, -1889, 'CDG', -1)
(-1869, -1850, 'DDGsrc2', -1)
(-1817, -1780, 'DDGdst7', -1)
(-1869, -1882, 'DDGdst3', -1)
(-1755, -1828, 'CDG', -1)
(-1748, -1755, 'CDG', -1)
(-1780, -1791, 'DDGdst3', -1)
(-1850, -1869, 'DDGsrc3', -1)
(-1804, -1764, 'DDGsrc6', -1)
(-1804, -1817, 'DDGdst7', -1)
(-1748, -1834, 'CDG', -1)
(-1775, -1764, 'DDGsrc', -1)
(-1862, -1882, 'DDGdst_stride', -1)
(-1729, -1748, 'DDGheight', -1)
(-1882, -1862, 'DDGdst0', -1)
(-1882, -1889, 'DDGdst', -1)
(-1780, -1804, 'DDGdst4', -1)
(-1817, -1780, 'DDGdst6', -1)
(-1850, -1857, 'DDGsrc_stride', -1)
(-1834, -1841, 'CDG', -1)
(-1841, -1850, 'CDG', -1)
(-1791, -1764, 'DDGsrc1', -1)
(-1764, -1804, 'DDGsrc6', -1)
(-1764, -1791, 'DDGsrc3', -1)
(-1862, -1869, 'DDGdst1', -1)
(-1791, -1764, 'DDGsrc2', -1)
(-1791, -1817, 'DDGdst3', -1)
(-1869, -1882, 'DDGdst2', -1)
(-1817, -1828, 'DDGdst_stride', -1)
(-1869, -1882, 'DDGdst0', -1)
(-1780, -1791, 'DDGdst2', -1)
(-1780, -1791, 'DDGdst0', -1)
(-1882, -1862, 'DDGdst1', -1)
(-1780, -1817, 'DDGdst', -1)
(-1780, -1804, 'DDGdst5', -1)
(-1804, -1817, 'DDGdst5', -1)
(-1817, -1780, 'DDGdst4', -1)
(-1862, -1869, 'DDGdst3', -1)
(-1841, -1869, 'CDG', -1)
(-1804, -1817, 'DDGdst4', -1)
(-1882, -1889, 'DDGdst_stride', -1)
(-1780, -1804, 'DDGdst7', -1)
(-1804, -1764, 'DDGsrc7', -1)
(-1791, -1817, 'DDGdst2', -1)
(-1755, -1780, 'CDG', -1)
(-1755, -1817, 'CDG', -1)
(-1882, -1862, 'DDGdst3', -1)
(-1804, -1817, 'DDGdst6', -1)
(-1791, -1764, 'DDGsrc3', -1)
(-1817, -1780, 'DDGdst2', -1)
(-1804, -1764, 'DDGsrc4', -1)
(-1764, -1804, 'DDGsrc7', -1)
(-1850, -1869, 'DDGsrc0', -1)
(-1764, -1804, 'DDGsrc4', -1)
(-1889, -1862, 'DDGdst_stride', -1)
(-1817, -1780, 'DDGdst5', -1)
(-1828, -1780, 'DDGdst_stride', -1)
(-1764, -1775, 'DDGsrc', -1)
(-1862, -1869, 'DDGdst2', -1)
(-1764, -1775, 'DDGsrc_stride', -1)
(-1857, -1850, 'DDGsrc', -1)
(-1850, -1869, 'DDGsrc1', -1)
(-1857, -1850, 'DDGsrc_stride', -1)
(-1862, -1869, 'DDGdst0', -1)
(-1804, -1764, 'DDGsrc5', -1)
(-1850, -1869, 'DDGsrc2', -1)
(-1841, -1857, 'CDG', -1)
(-1764, -1804, 'DDGsrc5', -1)
(-1834, -1841, 'DDGheight', -1)
(-1841, -1862, 'CDG', -1)
(-1869, -1850, 'DDGsrc0', -1)
(-1764, -1791, 'DDGsrc0', -1)
(-1841, -1882, 'CDG', -1)
(-1764, -1791, 'DDGsrc1', -1)
(-1791, -1817, 'DDGdst0', -1)
(-1869, -1850, 'DDGsrc1', -1)
(-1817, -1780, 'DDGdst0', -1)
(-1780, -1804, 'DDGdst6', -1)
(-1828, -1780, 'DDGdst', -1)
(-1755, -1775, 'CDG', -1)
(-1748, -1755, 'DDGheight', -1)
(-1791, -1817, 'DDGdst1', -1)
(-1748, -1834, 'DDGheight', -1)
(-1780, -1817, 'DDGdst_stride', -1)
(-1755, -1804, 'CDG', -1)
(-1755, -1791, 'CDG', -1)
(-1755, -1764, 'CDG', -1)
(-1817, -1780, 'DDGdst1', -1)
(-1850, -1857, 'DDGsrc', -1)
(-1882, -1862, 'DDGdst2', -1)
(-1862, -1882, 'DDGdst', -1)
(-1791, -1764, 'DDGsrc0', -1)
(-1775, -1764, 'DDGsrc_stride', -1)
(-1869, -1882, 'DDGdst1', -1)
(-1780, -1791, 'DDGdst1', -1)
(-1889, -1862, 'DDGdst', -1)
(-1869, -1850, 'DDGsrc3', -1)
(-54, -983, 'AST', -1)
(-211, -1724, 'AST', -1)
(-345, -1255, 'AST', -1)
(-428, -1444, 'AST', -1)
(-491, -1106, 'AST', -1)
===========================
(-16, 1, '-', 0, '+2986', 'LD4(src, stride, src0, src1, src2, src3)')
(-42, 1, '-', 0, '+2990', 'dst += 4 * stride')
(-5, 0, 'D', 2, '2982', 'ptrdiff_t stride')
(-35, 1, '-', 0, '+2989', 'SD4(src0, src1, src2, src3, dst, stride)')
(-47, 1, '-', 0, '+2991', 'SD4(src4, src5, src6, src7, dst, stride)')
(-28, 1, '-', 0, '+2988', 'LD4(src, stride, src4, src5, src6, src7)')
(-23, 1, '-', 0, '+2987', 'src += 4 * stride')
(-54, -1, '-', 0, '-2984', 'copy_width8_msa(src, stride, dst, stride, 8)')
(-174, 1, '-', 0, '+3014', 'AVER_UB4_UB(src0, dst0, src1, dst1, src2, dst2, src3, dst3, dst0, dst1,\\\\n                dst2, dst3)')
(-123, 1, '-', 0, '+3006', 'AVER_UB4_UB(src4, dst4, src5, dst5, src6, dst6, src7, dst7, dst4, dst5,\\\\n                dst6, dst7)')
(-64, 0, 'D', 2, '2995', 'ptrdiff_t stride')
(-187, 1, '-', 0, '+3016', 'AVER_UB4_UB(src4, dst4, src5, dst5, src6, dst6, src7, dst7, dst4, dst5,\\\\n                dst6, dst7)')
(-136, 1, '-', 0, '+3008', 'ST_UB8(dst0, dst1, dst2, dst3, dst4, dst5, dst6, dst7, dst, stride)')
(-147, 1, '-', 0, '+3009', 'dst += (8 * stride)')
(-94, 1, '-', 0, '+3001', 'src += (8 * stride)')
(-200, 1, '-', 0, '+3018', 'ST_UB8(dst0, dst1, dst2, dst3, dst4, dst5, dst6, dst7, dst, stride)')
(-152, 1, '-', 0, '+3011', 'LD_UB8(src, stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-99, 1, '-', 0, '+3002', 'LD_UB8(dst, stride, dst0, dst1, dst2, dst3, dst4, dst5, dst6, dst7)')
(-211, -1, '-', 0, '-2997', 'avg_width16_msa(src, stride, dst, stride, 16)')
(-110, 1, '-', 0, '+3004', 'AVER_UB4_UB(src0, dst0, src1, dst1, src2, dst2, src3, dst3, dst0, dst1,\\\\n                dst2, dst3)')
(-83, 1, '-', 0, '+3000', 'LD_UB8(src, stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-163, 1, '-', 0, '+3012', 'LD_UB8(dst, stride, dst0, dst1, dst2, dst3, dst4, dst5, dst6, dst7)')
(-248, 1, '-', 0, '+3026', 'dst1 = { 0 }')
(-321, 1, '-', 0, '+3041', 'INSERT_D2_UB(tp6, tp7, dst3)')
(-309, 1, '-', 0, '+3038', 'INSERT_D2_UB(tp0, tp1, dst0)')
(-283, 1, '-', 0, '+3033', 'INSERT_D2_UB(tp4, tp5, src2)')
(-242, 1, '-', 0, '+3025', 'src3 = { 0 }')
(-298, 1, '-', 0, '+3037', 'LD4(dst + 4 * stride, stride, tp4, tp5, tp6, tp7)')
(-291, 1, '-', 0, '+3036', 'LD4(dst, stride, tp0, tp1, tp2, tp3)')
(-317, 1, '-', 0, '+3040', 'INSERT_D2_UB(tp4, tp5, dst2)')
(-287, 1, '-', 0, '+3034', 'INSERT_D2_UB(tp6, tp7, src3)')
(-279, 1, '-', 0, '+3032', 'INSERT_D2_UB(tp2, tp3, src1)')
(-313, 1, '-', 0, '+3039', 'INSERT_D2_UB(tp2, tp3, dst1)')
(-256, 1, '-', 0, '+3028', 'LD4(src, stride, tp0, tp1, tp2, tp3)')
(-275, 1, '-', 0, '+3031', 'INSERT_D2_UB(tp0, tp1, src0)')
(-221, 0, 'D', 2, '3022', 'ptrdiff_t stride')
(-325, 1, '-', 0, '+3043', 'AVER_UB4_UB(src0, dst0, src1, dst1, src2, dst2, src3, dst3, dst0, dst1,\\\\n                dst2, dst3)')
(-268, 1, '-', 0, '+3030', 'LD4(src, stride, tp4, tp5, tp6, tp7)')
(-263, 1, '-', 0, '+3029', 'src += 4 * stride')
(-338, 1, '-', 0, '+3046', 'ST8x8_UB(dst0, dst1, dst2, dst3, dst, stride)')
(-345, -1, '-', 0, '-3024', 'avg_width8_msa(src, stride, dst, stride, 8)')
(-355, 0, 'D', 2, '2967', 'ptrdiff_t stride')
(-401, 1, '-', 0, '+2976', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, stride)')
(-385, 1, '-', 0, '+2973', 'src += (8 * stride)')
(-428, -1, '-', 0, '-2969', 'copy_width16_msa(src, stride, dst, stride, 16)')
(-412, 1, '-', 0, '+2977', 'dst += (8 * stride)')
(-374, 1, '-', 0, '+2972', 'LD_UB8(src, stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-390, 1, '-', 0, '+2974', 'LD_UB8(src, stride, src8, src9, src10, src11, src12, src13, src14, src15)')
(-417, 1, '-', 0, '+2978', 'ST_UB8(src8, src9, src10, src11, src12, src13, src14, src15, dst, stride)')
(-491, -1, '-', 0, '-3052', 'avg_width4_msa(src, stride, dst, stride, 4)')
(-458, 1, '-', 0, '+3056', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, src0)')
(-446, 1, '-', 0, '+3053', 'src0 = { 0 }')
(-482, 1, '-', 0, '+3062', 'ST4x4_UB(dst0, dst0, 0, 1, 2, 3, dst, stride)')
(-471, 1, '-', 0, '+3058', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, dst0)')
(-438, 0, 'D', 2, '3050', 'ptrdiff_t stride')
(-477, 1, '-', 0, '+3060', 'dst0 = __msa_aver_u_b(src0, dst0)')
(-451, 1, '-', 0, '+3055', 'LW4(src, stride, tp0, tp1, tp2, tp3)')
(-464, 1, '-', 0, '+3057', 'LW4(dst, stride, tp0, tp1, tp2, tp3)')
(-999, -1, '-', 0, '-51', 'if (0 == height % 8)')
(-1051, -1, '-', 0, '-60', 'SD4(out4, out5, out6, out7, dst, dst_stride)')
(-987, -1, '-', 0, '-45', 'int32_t dst_stride')
(-1034, -1, '-', 0, '-56', 'src += (4 * src_stride)')
(-1015, -1, '-', 0, '-53', 'LD4(src, src_stride, out0, out1, out2, out3)')
(-1022, -1, '-', 0, '-54', 'src += (4 * src_stride)')
(-1006, -1, '-', 0, '-52', 'for (cnt = height >> 3; cnt--;)')
(-1058, -1, '-', 0, '-61', 'dst += (4 * dst_stride)')
(-1080, -1, '-', 0, '-65', 'LD4(src, src_stride, out0, out1, out2, out3)')
(-1046, -1, '-', 0, '-59', 'dst += (4 * dst_stride)')
(-1027, -1, '-', 0, '-55', 'LD4(src, src_stride, out4, out5, out6, out7)')
(-1039, -1, '-', 0, '-58', 'SD4(out0, out1, out2, out3, dst, dst_stride)')
(-1099, -1, '-', 0, '-69', 'dst += (4 * dst_stride)')
(-1071, -1, '-', 0, '-64', 'for (cnt = (height / 4); cnt--;)')
(-983, -1, '-', 0, '-44', 'copy_width8_msa (const uint8_t *src,int32_t src_stride,uint8_t *dst,int32_t dst_stride,int32_t height)')
(-1064, -1, '-', 0, '-63', 'if (0 == height % 4)')
(-988, -1, '-', 0, '-46', 'int32_t height')
(-1087, -1, '-', 0, '-66', 'src += (4 * src_stride)')
(-1092, -1, '-', 0, '-68', 'SD4(out0, out1, out2, out3, dst, dst_stride)')
(-1202, -1, '-', 0, '-91', 'ST4x8_UB(dst0, dst1, dst, dst_stride)')
(-1220, -1, '-', 0, '-94', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, src0)')
(-1178, -1, '-', 0, '-88', 'LW4(dst + 4 * dst_stride, dst_stride, tp0, tp1, tp2, tp3)')
(-1165, -1, '-', 0, '-86', 'LW4(dst, dst_stride, tp0, tp1, tp2, tp3)')
(-1195, -1, '-', 0, '-90', 'AVER_UB2_UB(src0, dst0, src1, dst1, dst0, dst1)')
(-1226, -1, '-', 0, '-95', 'LW4(dst, dst_stride, tp0, tp1, tp2, tp3)')
(-1244, -1, '-', 0, '-98', 'ST4x4_UB(dst0, dst0, 0, 1, 2, 3, dst, dst_stride)')
(-1129, -1, '-', 0, '-80', 'if (8 == height)')
(-1111, -1, '-', 0, '-75', 'int32_t height')
(-1208, -1, '-', 0, '-92', 'if (4 == height)')
(-1159, -1, '-', 0, '-85', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, src1)')
(-1134, -1, '-', 0, '-81', 'LW4(src, src_stride, tp0, tp1, tp2, tp3)')
(-1106, -1, '-', 0, '-73', 'avg_width4_msa (const uint8_t *src,int32_t src_stride,uint8_t *dst,int32_t dst_stride,int32_t height)')
(-1146, -1, '-', 0, '-83', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, src0)')
(-1110, -1, '-', 0, '-74', 'int32_t dst_stride')
(-1172, -1, '-', 0, '-87', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, dst0)')
(-1124, -1, '-', 0, '-78', 'dst0 = { 0 }')
(-1239, -1, '-', 0, '-97', 'dst0 = __msa_aver_u_b(src0, dst0)')
(-1152, -1, '-', 0, '-84', 'LW4(src, src_stride, tp0, tp1, tp2, tp3)')
(-1141, -1, '-', 0, '-82', 'src += 4 * src_stride')
(-1233, -1, '-', 0, '-96', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, dst0)')
(-1213, -1, '-', 0, '-93', 'LW4(src, src_stride, tp0, tp1, tp2, tp3)')
(-1189, -1, '-', 0, '-89', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, dst1)')
(-1426, -1, '-', 0, '-137', 'INSERT_D2_UB(tp2, tp3, dst1)')
(-1331, -1, '-', 0, '-119', 'INSERT_D2_UB(tp6, tp7, src3)')
(-1323, -1, '-', 0, '-117', 'INSERT_D2_UB(tp2, tp3, src1)')
(-1422, -1, '-', 0, '-136', 'INSERT_D2_UB(tp0, tp1, dst0)')
(-1353, -1, '-', 0, '-122', 'INSERT_D2_UB(tp0, tp1, dst0)')
(-1437, -1, '-', 0, '-139', 'ST8x4_UB(dst0, dst1, dst, dst_stride)')
(-1314, -1, '-', 0, '-115', 'src += 4 * src_stride')
(-1400, -1, '-', 0, '-132', 'LD4(src, src_stride, tp0, tp1, tp2, tp3)')
(-1415, -1, '-', 0, '-135', 'LD4(dst, dst_stride, tp0, tp1, tp2, tp3)')
(-1369, -1, '-', 0, '-126', 'AVER_UB4_UB(src0, dst0, src1, dst1, src2, dst2, src3, dst3, dst0,\\n                        dst1, dst2, dst3)')
(-1430, -1, '-', 0, '-138', 'AVER_UB2_UB(src0, dst0, src1, dst1, dst0, dst1)')
(-1259, -1, '-', 0, '-102', 'int32_t dst_stride')
(-1307, -1, '-', 0, '-114', 'LD4(src, src_stride, tp4, tp5, tp6, tp7)')
(-1407, -1, '-', 0, '-133', 'INSERT_D2_UB(tp0, tp1, src0)')
(-1279, -1, '-', 0, '-110', 'if (0 == (height % 8))')
(-1255, -1, '-', 0, '-101', 'avg_width8_msa (const uint8_t *src,int32_t src_stride,uint8_t *dst,int32_t dst_stride,int32_t height)')
(-1411, -1, '-', 0, '-134', 'INSERT_D2_UB(tp2, tp3, src1)')
(-1361, -1, '-', 0, '-124', 'INSERT_D2_UB(tp4, tp5, dst2)')
(-1327, -1, '-', 0, '-118', 'INSERT_D2_UB(tp4, tp5, src2)')
(-1389, -1, '-', 0, '-129', 'dst += 8 * dst_stride')
(-1365, -1, '-', 0, '-125', 'INSERT_D2_UB(tp6, tp7, dst3)')
(-1335, -1, '-', 0, '-120', 'LD4(dst, dst_stride, tp0, tp1, tp2, tp3)')
(-1295, -1, '-', 0, '-112', 'LD4(src, src_stride, tp0, tp1, tp2, tp3)')
(-1382, -1, '-', 0, '-128', 'ST8x8_UB(dst0, dst1, dst2, dst3, dst, dst_stride)')
(-1302, -1, '-', 0, '-113', 'src += 4 * src_stride')
(-1357, -1, '-', 0, '-123', 'INSERT_D2_UB(tp2, tp3, dst1)')
(-1260, -1, '-', 0, '-103', 'int32_t height')
(-1319, -1, '-', 0, '-116', 'INSERT_D2_UB(tp0, tp1, src0)')
(-1286, -1, '-', 0, '-111', 'for (cnt = (height >> 3); cnt--;)')
(-1342, -1, '-', 0, '-121', 'LD4(dst + 4 * dst_stride, dst_stride, tp4, tp5, tp6, tp7)')
(-1395, -1, '-', 0, '-131', 'if (4 == height)')
(-1705, -1, '-', 0, '-38', 'src += (4 * src_stride)')
(-1493, -1, '-', 0, '-12', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1654, -1, '-', 0, '-32', 'dst += (8 * dst_stride)')
(-1643, -1, '-', 0, '-31', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, dst_stride)')
(-1682, -1, '-', 0, '-35', 'if (0 == height % 4)')
(-1488, -1, '-', 0, '-11', 'if (16 == height)')
(-1689, -1, '-', 0, '-36', 'for (cnt = (height >> 2); cnt--;)')
(-1590, -1, '-', 0, '-24', 'dst += (8 * dst_stride)')
(-1520, -1, '-', 0, '-15', 'dst += (8 * dst_stride)')
(-1622, -1, '-', 0, '-28', 'dst += (8 * dst_stride)')
(-1606, -1, '-', 0, '-26', 'src += (8 * src_stride)')
(-1579, -1, '-', 0, '-23', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, dst_stride)')
(-1465, -1, '-', 0, '-9', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1444, -1, '-', 0, '-1', 'copy_width16_msa (const uint8_t *src,int32_t src_stride,uint8_t *dst,int32_t dst_stride,int32_t height)')
(-1558, -1, '-', 0, '-20', 'if (32 == height)')
(-1670, -1, '-', 0, '-34', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, dst_stride)')
(-1595, -1, '-', 0, '-25', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1552, -1, '-', 0, '-19', 'dst += (8 * dst_stride)')
(-1509, -1, '-', 0, '-14', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, dst_stride)')
(-1536, -1, '-', 0, '-17', 'src += (8 * src_stride)')
(-1710, -1, '-', 0, '-39', 'ST_UB4(src0, src1, src2, src3, dst, dst_stride)')
(-1541, -1, '-', 0, '-18', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, dst_stride)')
(-1638, -1, '-', 0, '-30', 'src += (8 * src_stride)')
(-1525, -1, '-', 0, '-16', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1448, -1, '-', 0, '-2', 'int32_t dst_stride')
(-1574, -1, '-', 0, '-22', 'src += (8 * src_stride)')
(-1659, -1, '-', 0, '-33', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1476, -1, '-', 0, '-10', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, dst_stride)')
(-1504, -1, '-', 0, '-13', 'src += (8 * src_stride)')
(-1611, -1, '-', 0, '-27', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, dst_stride)')
(-1449, -1, '-', 0, '-3', 'int32_t height')
(-1460, -1, '-', 0, '-8', 'if (8 == height)')
(-1627, -1, '-', 0, '-29', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1698, -1, '-', 0, '-37', 'LD_UB4(src, src_stride, src0, src1, src2, src3)')
(-1563, -1, '-', 0, '-21', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1717, -1, '-', 0, '-40', 'dst += (4 * dst_stride)')
(-1791, -1, '-', 0, '-156', 'AVER_UB4_UB(src0, dst0, src1, dst1, src2, dst2, src3, dst3,\\n                        dst0, dst1, dst2, dst3)')
(-1841, -1, '-', 0, '-164', 'for (cnt = (height / 4); cnt--;)')
(-1804, -1, '-', 0, '-158', 'AVER_UB4_UB(src4, dst4, src5, dst5, src6, dst6, src7, dst7,\\n                        dst4, dst5, dst6, dst7)')
(-1850, -1, '-', 0, '-165', 'LD_UB4(src, src_stride, src0, src1, src2, src3)')
(-1748, -1, '-', 0, '-150', 'if (0 == (height % 8))')
(-1882, -1, '-', 0, '-171', 'ST_UB4(dst0, dst1, dst2, dst3, dst, dst_stride)')
(-1817, -1, '-', 0, '-160', 'ST_UB8(dst0, dst1, dst2, dst3, dst4, dst5, dst6, dst7, dst, dst_stride)')
(-1834, -1, '-', 0, '-163', 'if (0 == (height % 4))')
(-1869, -1, '-', 0, '-169', 'AVER_UB4_UB(src0, dst0, src1, dst1, src2, dst2, src3, dst3,\\n                        dst0, dst1, dst2, dst3)')
(-1828, -1, '-', 0, '-161', 'dst += (8 * dst_stride)')
(-1780, -1, '-', 0, '-154', 'LD_UB8(dst, dst_stride, dst0, dst1, dst2, dst3, dst4, dst5, dst6, dst7)')
(-1857, -1, '-', 0, '-166', 'src += (4 * src_stride)')
(-1728, -1, '-', 0, '-143', 'int32_t dst_stride')
(-1724, -1, '-', 0, '-142', 'avg_width16_msa (const uint8_t *src,int32_t src_stride,uint8_t *dst,int32_t dst_stride,int32_t height)')
(-1862, -1, '-', 0, '-167', 'LD_UB4(dst, dst_stride, dst0, dst1, dst2, dst3)')
(-1764, -1, '-', 0, '-152', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1775, -1, '-', 0, '-153', 'src += (8 * src_stride)')
(-1729, -1, '-', 0, '-144', 'int32_t height')
(-1889, -1, '-', 0, '-172', 'dst += (4 * dst_stride)')
(-1755, -1, '-', 0, '-151', 'for (cnt = (height / 8); cnt--;)')
---------------------------
(-5, -54, 'DDG', -1)
(-64, -211, 'DDG', -1)
(-221, -345, 'DDG', -1)
(-355, -428, 'DDG', -1)
(-438, -491, 'DDG', -1)
(-1092, -1080, 'DDGout2', -1)
(-1027, -1051, 'DDGout5', -1)
(-1051, -1027, 'DDGout5', -1)
(-1064, -1071, 'CDG', -1)
(-988, -999, 'DDGheight', -1)
(-1064, -1071, 'DDGheight', -1)
(-1080, -1092, 'DDGout3', -1)
(-1071, -1092, 'CDG', -1)
(-1071, -1080, 'CDG', -1)
(-1039, -1015, 'DDGout1', -1)
(-1080, -1092, 'DDGout0', -1)
(-1015, -1039, 'DDGout2', -1)
(-1015, -1022, 'DDGsrc', -1)
(-999, -1064, 'CDG', -1)
(-1080, -1092, 'DDGout1', -1)
(-1006, -1046, 'CDG', -1)
(-1006, -1034, 'CDG', -1)
(-1027, -1051, 'DDGout6', -1)
(-1034, -1015, 'DDGsrc', -1)
(-1039, -1015, 'DDGout2', -1)
(-1022, -1027, 'DDGsrc', -1)
(-1051, -1058, 'DDGdst', -1)
(-1039, -1046, 'DDGdst', -1)
(-999, -1064, 'DDGheight', -1)
(-1051, -1058, 'DDGdst_stride', -1)
(-1046, -1051, 'DDGdst', -1)
(-1022, -1027, 'DDGsrc_stride', -1)
(-1006, -1022, 'CDG', -1)
(-1046, -1051, 'DDGdst_stride', -1)
(-1051, -1027, 'DDGout6', -1)
(-1080, -1092, 'DDGout2', -1)
(-1015, -1022, 'DDGsrc_stride', -1)
(-1058, -1039, 'DDGdst', -1)
(-1087, -1080, 'DDGsrc', -1)
(-1034, -1015, 'DDGsrc_stride', -1)
(-1058, -1039, 'DDGdst_stride', -1)
(-1092, -1080, 'DDGout3', -1)
(-1039, -1046, 'DDGdst_stride', -1)
(-1071, -1087, 'CDG', -1)
(-1092, -1080, 'DDGout0', -1)
(-1071, -1099, 'CDG', -1)
(-1006, -1058, 'CDG', -1)
(-1080, -1087, 'DDGsrc', -1)
(-1092, -1080, 'DDGout1', -1)
(-1027, -1034, 'DDGsrc', -1)
(-1092, -1099, 'DDGdst', -1)
(-1080, -1087, 'DDGsrc_stride', -1)
(-1006, -1051, 'CDG', -1)
(-1099, -1092, 'DDGdst', -1)
(-1087, -1080, 'DDGsrc_stride', -1)
(-1027, -1051, 'DDGout4', -1)
(-999, -1006, 'CDG', -1)
(-1034, -1022, 'DDGsrc_stride', -1)
(-999, -1006, 'DDGheight', -1)
(-1027, -1051, 'DDGout7', -1)
(-1051, -1027, 'DDGout7', -1)
(-1015, -1039, 'DDGout3', -1)
(-1039, -1015, 'DDGout0', -1)
(-1027, -1034, 'DDGsrc_stride', -1)
(-1015, -1039, 'DDGout0', -1)
(-1006, -1039, 'CDG', -1)
(-1092, -1099, 'DDGdst_stride', -1)
(-1006, -1027, 'CDG', -1)
(-1058, -1046, 'DDGdst_stride', -1)
(-1099, -1092, 'DDGdst_stride', -1)
(-1051, -1027, 'DDGout4', -1)
(-1015, -1039, 'DDGout1', -1)
(-1006, -1015, 'CDG', -1)
(-1039, -1015, 'DDGout3', -1)
(-1159, -1165, 'DDGtp2', -1)
(-1165, -1172, 'DDGtp0', -1)
(-1172, -1178, 'DDGtp3', -1)
(-1152, -1159, 'DDGtp2', -1)
(-1220, -1226, 'DDGtp0', -1)
(-1165, -1202, 'DDGdst', -1)
(-1129, -1208, 'CDG', -1)
(-1165, -1172, 'DDGtp3', -1)
(-1172, -1178, 'DDGtp1', -1)
(-1146, -1152, 'DDGtp2', -1)
(-1220, -1226, 'DDGtp3', -1)
(-1134, -1146, 'DDGtp2', -1)
(-1165, -1172, 'DDGtp1', -1)
(-1195, -1202, 'DDGdst0', -1)
(-1124, -1172, 'DDGdst0', -1)
(-1213, -1220, 'DDGtp2', -1)
(-1146, -1195, 'DDGsrc0', -1)
(-1129, -1202, 'CDG', -1)
(-1220, -1226, 'DDGtp1', -1)
(-1226, -1233, 'DDGtp2', -1)
(-1165, -1178, 'DDGdst', -1)
(-1239, -1244, 'DDGdst0', -1)
(-1208, -1226, 'CDG', -1)
(-1146, -1152, 'DDGtp3', -1)
(-1134, -1146, 'DDGtp3', -1)
(-1129, -1146, 'CDG', -1)
(-1178, -1189, 'DDGtp3', -1)
(-1124, -1146, 'DDGsrc0', -1)
(-1146, -1152, 'DDGtp1', -1)
(-1226, -1244, 'DDGdst', -1)
(-1159, -1165, 'DDGtp0', -1)
(-1134, -1146, 'DDGtp1', -1)
(-1159, -1195, 'DDGsrc1', -1)
(-1226, -1233, 'DDGtp3', -1)
(-1129, -1165, 'CDG', -1)
(-1213, -1220, 'DDGtp1', -1)
(-1146, -1152, 'DDGtp0', -1)
(-1226, -1233, 'DDGtp1', -1)
(-1152, -1159, 'DDGtp3', -1)
(-1159, -1165, 'DDGtp1', -1)
(-1208, -1244, 'CDG', -1)
(-1152, -1159, 'DDGtp1', -1)
(-1129, -1195, 'CDG', -1)
(-1134, -1146, 'DDGtp0', -1)
(-1226, -1233, 'DDGtp0', -1)
(-1141, -1152, 'DDGsrc', -1)
(-1129, -1208, 'DDGheight', -1)
(-1208, -1233, 'CDG', -1)
(-1172, -1178, 'DDGtp2', -1)
(-1208, -1220, 'CDG', -1)
(-1213, -1220, 'DDGtp3', -1)
(-1220, -1239, 'DDGsrc0', -1)
(-1152, -1159, 'DDGtp0', -1)
(-1178, -1202, 'DDGdst_stride', -1)
(-1165, -1172, 'DDGtp2', -1)
(-1159, -1165, 'DDGtp3', -1)
(-1111, -1129, 'DDGheight', -1)
(-1220, -1226, 'DDGtp2', -1)
(-1129, -1152, 'CDG', -1)
(-1129, -1141, 'CDG', -1)
(-1208, -1213, 'CDG', -1)
(-1178, -1189, 'DDGtp1', -1)
(-1208, -1239, 'CDG', -1)
(-1189, -1195, 'DDGdst1', -1)
(-1172, -1195, 'DDGdst0', -1)
(-1195, -1202, 'DDGdst1', -1)
(-1178, -1189, 'DDGtp0', -1)
(-1213, -1220, 'DDGtp0', -1)
(-1134, -1141, 'DDGsrc', -1)
(-1141, -1152, 'DDGsrc_stride', -1)
(-1124, -1159, 'DDGsrc1', -1)
(-1129, -1134, 'CDG', -1)
(-1124, -1220, 'DDGsrc0', -1)
(-1233, -1239, 'DDGdst0', -1)
(-1129, -1172, 'CDG', -1)
(-1226, -1244, 'DDGdst_stride', -1)
(-1124, -1233, 'DDGdst0', -1)
(-1134, -1141, 'DDGsrc_stride', -1)
(-1178, -1189, 'DDGtp2', -1)
(-1129, -1159, 'CDG', -1)
(-1124, -1189, 'DDGdst1', -1)
(-1165, -1178, 'DDGdst_stride', -1)
(-1129, -1178, 'CDG', -1)
(-1172, -1178, 'DDGtp0', -1)
(-1129, -1189, 'CDG', -1)
(-1286, -1353, 'CDG', -1)
(-1395, -1426, 'CDG', -1)
(-1323, -1335, 'DDGtp3', -1)
(-1279, -1286, 'DDGheight', -1)
(-1369, -1331, 'DDGsrc3', -1)
(-1286, -1307, 'CDG', -1)
(-1295, -1323, 'DDGtp2', -1)
(-1342, -1361, 'DDGtp4', -1)
(-1335, -1353, 'DDGtp0', -1)
(-1369, -1382, 'DDGdst2', -1)
(-1430, -1437, 'DDGdst1', -1)
(-1335, -1342, 'DDGdst', -1)
(-1400, -1407, 'DDGtp0', -1)
(-1314, -1302, 'DDGsrc_stride', -1)
(-1395, -1415, 'CDG', -1)
(-1327, -1342, 'DDGtp4', -1)
(-1389, -1335, 'DDGdst_stride', -1)
(-1415, -1437, 'DDGdst', -1)
(-1395, -1407, 'CDG', -1)
(-1411, -1430, 'DDGsrc1', -1)
(-1286, -1389, 'CDG', -1)
(-1395, -1422, 'CDG', -1)
(-1365, -1307, 'DDGtp7', -1)
(-1400, -1407, 'DDGtp1', -1)
(-1430, -1437, 'DDGdst0', -1)
(-1279, -1286, 'CDG', -1)
(-1307, -1331, 'DDGtp6', -1)
(-1286, -1319, 'CDG', -1)
(-1357, -1369, 'DDGdst1', -1)
(-1286, -1331, 'CDG', -1)
(-1307, -1314, 'DDGsrc_stride', -1)
(-1319, -1369, 'DDGsrc0', -1)
(-1411, -1415, 'DDGtp2', -1)
(-1415, -1422, 'DDGtp1', -1)
(-1353, -1295, 'DDGtp0', -1)
(-1295, -1319, 'DDGtp0', -1)
(-1361, -1307, 'DDGtp4', -1)
(-1369, -1382, 'DDGdst1', -1)
(-1286, -1369, 'CDG', -1)
(-1369, -1327, 'DDGsrc2', -1)
(-1335, -1357, 'DDGtp3', -1)
(-1407, -1415, 'DDGtp0', -1)
(-1382, -1389, 'DDGdst_stride', -1)
(-1369, -1323, 'DDGsrc1', -1)
(-1286, -1335, 'CDG', -1)
(-1353, -1295, 'DDGtp1', -1)
(-1361, -1369, 'DDGdst2', -1)
(-1382, -1357, 'DDGdst1', -1)
(-1382, -1365, 'DDGdst3', -1)
(-1415, -1422, 'DDGtp0', -1)
(-1407, -1415, 'DDGtp1', -1)
(-1286, -1327, 'CDG', -1)
(-1395, -1400, 'CDG', -1)
(-1295, -1302, 'DDGsrc', -1)
(-1286, -1314, 'CDG', -1)
(-1295, -1302, 'DDGsrc_stride', -1)
(-1357, -1295, 'DDGtp2', -1)
(-1295, -1323, 'DDGtp3', -1)
(-1353, -1369, 'DDGdst0', -1)
(-1335, -1382, 'DDGdst', -1)
(-1319, -1335, 'DDGtp0', -1)
(-1400, -1411, 'DDGtp2', -1)
(-1365, -1307, 'DDGtp6', -1)
(-1382, -1361, 'DDGdst2', -1)
(-1323, -1369, 'DDGsrc1', -1)
(-1286, -1357, 'CDG', -1)
(-1395, -1430, 'CDG', -1)
(-1415, -1426, 'DDGtp2', -1)
(-1327, -1369, 'DDGsrc2', -1)
(-1389, -1335, 'DDGdst', -1)
(-1323, -1335, 'DDGtp2', -1)
(-1319, -1335, 'DDGtp1', -1)
(-1331, -1369, 'DDGsrc3', -1)
(-1382, -1389, 'DDGdst', -1)
(-1302, -1307, 'DDGsrc', -1)
(-1369, -1382, 'DDGdst0', -1)
(-1369, -1382, 'DDGdst3', -1)
(-1335, -1342, 'DDGdst_stride', -1)
(-1395, -1437, 'CDG', -1)
(-1286, -1361, 'CDG', -1)
(-1369, -1319, 'DDGsrc0', -1)
(-1411, -1415, 'DDGtp3', -1)
(-1286, -1342, 'CDG', -1)
(-1361, -1307, 'DDGtp5', -1)
(-1314, -1295, 'DDGsrc', -1)
(-1307, -1314, 'DDGsrc', -1)
(-1286, -1365, 'CDG', -1)
(-1342, -1361, 'DDGtp5', -1)
(-1260, -1279, 'DDGheight', -1)
(-1327, -1342, 'DDGtp5', -1)
(-1426, -1430, 'DDGdst1', -1)
(-1342, -1365, 'DDGtp7', -1)
(-1422, -1430, 'DDGdst0', -1)
(-1342, -1382, 'DDGdst_stride', -1)
(-1407, -1430, 'DDGsrc0', -1)
(-1307, -1327, 'DDGtp5', -1)
(-1286, -1382, 'CDG', -1)
(-1335, -1357, 'DDGtp2', -1)
(-1342, -1365, 'DDGtp6', -1)
(-1307, -1327, 'DDGtp4', -1)
(-1295, -1319, 'DDGtp1', -1)
(-1365, -1369, 'DDGdst3', -1)
(-1331, -1342, 'DDGtp7', -1)
(-1286, -1295, 'CDG', -1)
(-1302, -1307, 'DDGsrc_stride', -1)
(-1415, -1437, 'DDGdst_stride', -1)
(-1286, -1323, 'CDG', -1)
(-1357, -1295, 'DDGtp3', -1)
(-1307, -1331, 'DDGtp7', -1)
(-1400, -1411, 'DDGtp3', -1)
(-1382, -1353, 'DDGdst0', -1)
(-1279, -1395, 'CDG', -1)
(-1335, -1353, 'DDGtp1', -1)
(-1279, -1395, 'DDGheight', -1)
(-1331, -1342, 'DDGtp6', -1)
(-1395, -1411, 'CDG', -1)
(-1415, -1426, 'DDGtp3', -1)
(-1314, -1295, 'DDGsrc_stride', -1)
(-1286, -1302, 'CDG', -1)
(-1689, -1705, 'CDG', -1)
(-1541, -1552, 'DDGdst', -1)
(-1689, -1717, 'CDG', -1)
(-1659, -1670, 'DDGsrc2', -1)
(-1611, -1627, 'DDGsrc2', -1)
(-1698, -1710, 'DDGsrc0', -1)
(-1493, -1509, 'DDGsrc1', -1)
(-1622, -1643, 'DDGdst', -1)
(-1638, -1659, 'DDGsrc', -1)
(-1558, -1670, 'CDG', -1)
(-1579, -1595, 'DDGsrc0', -1)
(-1710, -1698, 'DDGsrc0', -1)
(-1558, -1606, 'CDG', -1)
(-1590, -1622, 'DDGdst_stride', -1)
(-1627, -1643, 'DDGsrc7', -1)
(-1525, -1536, 'DDGsrc', -1)
(-1611, -1622, 'DDGdst', -1)
(-1698, -1710, 'DDGsrc1', -1)
(-1488, -1520, 'CDG', -1)
(-1509, -1525, 'DDGsrc2', -1)
(-1558, -1611, 'CDG', -1)
(-1525, -1536, 'DDGsrc_stride', -1)
(-1590, -1611, 'DDGdst', -1)
(-1654, -1670, 'DDGdst', -1)
(-1627, -1643, 'DDGsrc4', -1)
(-1606, -1638, 'DDGsrc_stride', -1)
(-1659, -1670, 'DDGsrc7', -1)
(-1563, -1574, 'DDGsrc', -1)
(-1611, -1627, 'DDGsrc7', -1)
(-1622, -1654, 'DDGdst_stride', -1)
(-1558, -1590, 'CDG', -1)
(-1659, -1670, 'DDGsrc4', -1)
(-1509, -1520, 'DDGdst_stride', -1)
(-1465, -1476, 'DDGsrc2', -1)
(-1710, -1698, 'DDGsrc2', -1)
(-1627, -1643, 'DDGsrc3', -1)
(-1488, -1509, 'CDG', -1)
(-1558, -1622, 'CDG', -1)
(-1558, -1638, 'CDG', -1)
(-1509, -1525, 'DDGsrc7', -1)
(-1574, -1606, 'DDGsrc_stride', -1)
(-1643, -1659, 'DDGsrc5', -1)
(-1659, -1670, 'DDGsrc3', -1)
(-1579, -1590, 'DDGdst_stride', -1)
(-1509, -1525, 'DDGsrc4', -1)
(-1541, -1552, 'DDGdst_stride', -1)
(-1595, -1606, 'DDGsrc_stride', -1)
(-1643, -1654, 'DDGdst', -1)
(-1558, -1563, 'CDG', -1)
(-1558, -1579, 'CDG', -1)
(-1717, -1710, 'DDGdst_stride', -1)
(-1465, -1476, 'DDGsrc6', -1)
(-1682, -1689, 'DDGheight', -1)
(-1611, -1627, 'DDGsrc5', -1)
(-1460, -1488, 'DDGheight', -1)
(-1590, -1654, 'DDGdst_stride', -1)
(-1493, -1509, 'DDGsrc3', -1)
(-1579, -1595, 'DDGsrc4', -1)
(-1643, -1659, 'DDGsrc7', -1)
(-1574, -1595, 'DDGsrc_stride', -1)
(-1488, -1493, 'CDG', -1)
(-1643, -1659, 'DDGsrc0', -1)
(-1509, -1525, 'DDGsrc3', -1)
(-1705, -1698, 'DDGsrc_stride', -1)
(-1595, -1611, 'DDGsrc4', -1)
(-1698, -1710, 'DDGsrc3', -1)
(-1611, -1627, 'DDGsrc0', -1)
(-1493, -1509, 'DDGsrc2', -1)
(-1643, -1659, 'DDGsrc1', -1)
(-1579, -1595, 'DDGsrc3', -1)
(-1525, -1541, 'DDGsrc1', -1)
(-1488, -1558, 'CDG', -1)
(-1710, -1698, 'DDGsrc3', -1)
(-1558, -1659, 'CDG', -1)
(-1595, -1611, 'DDGsrc3', -1)
(-1611, -1627, 'DDGsrc1', -1)
(-1698, -1710, 'DDGsrc2', -1)
(-1595, -1611, 'DDGsrc5', -1)
(-1563, -1579, 'DDGsrc2', -1)
(-1579, -1595, 'DDGsrc2', -1)
(-1717, -1710, 'DDGdst', -1)
(-1493, -1504, 'DDGsrc', -1)
(-1710, -1717, 'DDGdst_stride', -1)
(-1627, -1643, 'DDGsrc5', -1)
(-1460, -1488, 'CDG', -1)
(-1493, -1509, 'DDGsrc4', -1)
(-1643, -1654, 'DDGdst_stride', -1)
(-1558, -1682, 'CDG', -1)
(-1574, -1595, 'DDGsrc', -1)
(-1595, -1606, 'DDGsrc', -1)
(-1595, -1611, 'DDGsrc0', -1)
(-1558, -1682, 'DDGheight', -1)
(-1595, -1611, 'DDGsrc7', -1)
(-1525, -1541, 'DDGsrc6', -1)
(-1659, -1670, 'DDGsrc5', -1)
(-1705, -1698, 'DDGsrc', -1)
(-1563, -1579, 'DDGsrc6', -1)
(-1520, -1541, 'DDGdst_stride', -1)
(-1488, -1504, 'CDG', -1)
(-1465, -1476, 'DDGsrc7', -1)
(-1611, -1627, 'DDGsrc6', -1)
(-1579, -1595, 'DDGsrc7', -1)
(-1574, -1638, 'DDGsrc_stride', -1)
(-1465, -1476, 'DDGsrc4', -1)
(-1525, -1541, 'DDGsrc0', -1)
(-1509, -1525, 'DDGsrc5', -1)
(-1460, -1476, 'CDG', -1)
(-1590, -1611, 'DDGdst_stride', -1)
(-1509, -1520, 'DDGdst', -1)
(-1689, -1710, 'CDG', -1)
(-1488, -1536, 'CDG', -1)
(-1627, -1643, 'DDGsrc1', -1)
(-1488, -1552, 'CDG', -1)
(-1465, -1476, 'DDGsrc3', -1)
(-1563, -1579, 'DDGsrc3', -1)
(-1493, -1509, 'DDGsrc5', -1)
(-1595, -1611, 'DDGsrc6', -1)
(-1627, -1638, 'DDGsrc_stride', -1)
(-1465, -1476, 'DDGsrc5', -1)
(-1659, -1670, 'DDGsrc1', -1)
(-1611, -1627, 'DDGsrc3', -1)
(-1525, -1541, 'DDGsrc2', -1)
(-1643, -1659, 'DDGsrc6', -1)
(-1563, -1579, 'DDGsrc5', -1)
(-1488, -1525, 'CDG', -1)
(-1488, -1541, 'CDG', -1)
(-1493, -1504, 'DDGsrc_stride', -1)
(-1698, -1705, 'DDGsrc', -1)
(-1493, -1509, 'DDGsrc0', -1)
(-1493, -1509, 'DDGsrc7', -1)
(-1558, -1654, 'CDG', -1)
(-1682, -1689, 'CDG', -1)
(-1460, -1465, 'CDG', -1)
(-1465, -1476, 'DDGsrc0', -1)
(-1509, -1525, 'DDGsrc1', -1)
(-1627, -1643, 'DDGsrc6', -1)
(-1449, -1460, 'DDGheight', -1)
(-1520, -1541, 'DDGdst', -1)
(-1622, -1643, 'DDGdst_stride', -1)
(-1595, -1611, 'DDGsrc1', -1)
(-1698, -1705, 'DDGsrc_stride', -1)
(-1558, -1595, 'CDG', -1)
(-1689, -1698, 'CDG', -1)
(-1563, -1579, 'DDGsrc0', -1)
(-1563, -1579, 'DDGsrc7', -1)
(-1525, -1541, 'DDGsrc7', -1)
(-1504, -1525, 'DDGsrc', -1)
(-1606, -1627, 'DDGsrc', -1)
(-1643, -1659, 'DDGsrc4', -1)
(-1659, -1670, 'DDGsrc6', -1)
(-1638, -1659, 'DDGsrc_stride', -1)
(-1611, -1622, 'DDGdst_stride', -1)
(-1563, -1579, 'DDGsrc1', -1)
(-1465, -1476, 'DDGsrc1', -1)
(-1654, -1670, 'DDGdst_stride', -1)
(-1579, -1595, 'DDGsrc1', -1)
(-1627, -1643, 'DDGsrc0', -1)
(-1563, -1579, 'DDGsrc4', -1)
(-1525, -1541, 'DDGsrc4', -1)
(-1558, -1643, 'CDG', -1)
(-1488, -1558, 'DDGheight', -1)
(-1710, -1698, 'DDGsrc1', -1)
(-1504, -1536, 'DDGsrc_stride', -1)
(-1504, -1525, 'DDGsrc_stride', -1)
(-1606, -1627, 'DDGsrc_stride', -1)
(-1558, -1574, 'CDG', -1)
(-1611, -1627, 'DDGsrc4', -1)
(-1520, -1552, 'DDGdst_stride', -1)
(-1659, -1670, 'DDGsrc0', -1)
(-1493, -1509, 'DDGsrc6', -1)
(-1643, -1659, 'DDGsrc3', -1)
(-1509, -1525, 'DDGsrc6', -1)
(-1595, -1611, 'DDGsrc2', -1)
(-1525, -1541, 'DDGsrc3', -1)
(-1710, -1717, 'DDGdst', -1)
(-1563, -1574, 'DDGsrc_stride', -1)
(-1525, -1541, 'DDGsrc5', -1)
(-1627, -1638, 'DDGsrc', -1)
(-1627, -1643, 'DDGsrc2', -1)
(-1579, -1595, 'DDGsrc5', -1)
(-1643, -1659, 'DDGsrc2', -1)
(-1558, -1627, 'CDG', -1)
(-1509, -1525, 'DDGsrc0', -1)
(-1579, -1595, 'DDGsrc6', -1)
(-1579, -1590, 'DDGdst', -1)
(-1817, -1828, 'DDGdst', -1)
(-1764, -1791, 'DDGsrc2', -1)
(-1817, -1780, 'DDGdst3', -1)
(-1841, -1889, 'CDG', -1)
(-1869, -1850, 'DDGsrc2', -1)
(-1817, -1780, 'DDGdst7', -1)
(-1869, -1882, 'DDGdst3', -1)
(-1755, -1828, 'CDG', -1)
(-1748, -1755, 'CDG', -1)
(-1780, -1791, 'DDGdst3', -1)
(-1850, -1869, 'DDGsrc3', -1)
(-1804, -1764, 'DDGsrc6', -1)
(-1804, -1817, 'DDGdst7', -1)
(-1748, -1834, 'CDG', -1)
(-1775, -1764, 'DDGsrc', -1)
(-1862, -1882, 'DDGdst_stride', -1)
(-1729, -1748, 'DDGheight', -1)
(-1882, -1862, 'DDGdst0', -1)
(-1882, -1889, 'DDGdst', -1)
(-1780, -1804, 'DDGdst4', -1)
(-1817, -1780, 'DDGdst6', -1)
(-1850, -1857, 'DDGsrc_stride', -1)
(-1834, -1841, 'CDG', -1)
(-1841, -1850, 'CDG', -1)
(-1791, -1764, 'DDGsrc1', -1)
(-1764, -1804, 'DDGsrc6', -1)
(-1764, -1791, 'DDGsrc3', -1)
(-1862, -1869, 'DDGdst1', -1)
(-1791, -1764, 'DDGsrc2', -1)
(-1791, -1817, 'DDGdst3', -1)
(-1869, -1882, 'DDGdst2', -1)
(-1817, -1828, 'DDGdst_stride', -1)
(-1869, -1882, 'DDGdst0', -1)
(-1780, -1791, 'DDGdst2', -1)
(-1780, -1791, 'DDGdst0', -1)
(-1882, -1862, 'DDGdst1', -1)
(-1780, -1817, 'DDGdst', -1)
(-1780, -1804, 'DDGdst5', -1)
(-1804, -1817, 'DDGdst5', -1)
(-1817, -1780, 'DDGdst4', -1)
(-1862, -1869, 'DDGdst3', -1)
(-1841, -1869, 'CDG', -1)
(-1804, -1817, 'DDGdst4', -1)
(-1882, -1889, 'DDGdst_stride', -1)
(-1780, -1804, 'DDGdst7', -1)
(-1804, -1764, 'DDGsrc7', -1)
(-1791, -1817, 'DDGdst2', -1)
(-1755, -1780, 'CDG', -1)
(-1755, -1817, 'CDG', -1)
(-1882, -1862, 'DDGdst3', -1)
(-1804, -1817, 'DDGdst6', -1)
(-1791, -1764, 'DDGsrc3', -1)
(-1817, -1780, 'DDGdst2', -1)
(-1804, -1764, 'DDGsrc4', -1)
(-1764, -1804, 'DDGsrc7', -1)
(-1850, -1869, 'DDGsrc0', -1)
(-1764, -1804, 'DDGsrc4', -1)
(-1889, -1862, 'DDGdst_stride', -1)
(-1817, -1780, 'DDGdst5', -1)
(-1828, -1780, 'DDGdst_stride', -1)
(-1764, -1775, 'DDGsrc', -1)
(-1862, -1869, 'DDGdst2', -1)
(-1764, -1775, 'DDGsrc_stride', -1)
(-1857, -1850, 'DDGsrc', -1)
(-1850, -1869, 'DDGsrc1', -1)
(-1857, -1850, 'DDGsrc_stride', -1)
(-1862, -1869, 'DDGdst0', -1)
(-1804, -1764, 'DDGsrc5', -1)
(-1850, -1869, 'DDGsrc2', -1)
(-1841, -1857, 'CDG', -1)
(-1764, -1804, 'DDGsrc5', -1)
(-1834, -1841, 'DDGheight', -1)
(-1841, -1862, 'CDG', -1)
(-1869, -1850, 'DDGsrc0', -1)
(-1764, -1791, 'DDGsrc0', -1)
(-1841, -1882, 'CDG', -1)
(-1764, -1791, 'DDGsrc1', -1)
(-1791, -1817, 'DDGdst0', -1)
(-1869, -1850, 'DDGsrc1', -1)
(-1817, -1780, 'DDGdst0', -1)
(-1780, -1804, 'DDGdst6', -1)
(-1828, -1780, 'DDGdst', -1)
(-1755, -1775, 'CDG', -1)
(-1748, -1755, 'DDGheight', -1)
(-1791, -1817, 'DDGdst1', -1)
(-1748, -1834, 'DDGheight', -1)
(-1780, -1817, 'DDGdst_stride', -1)
(-1755, -1804, 'CDG', -1)
(-1755, -1791, 'CDG', -1)
(-1755, -1764, 'CDG', -1)
(-1817, -1780, 'DDGdst1', -1)
(-1850, -1857, 'DDGsrc', -1)
(-1882, -1862, 'DDGdst2', -1)
(-1862, -1882, 'DDGdst', -1)
(-1791, -1764, 'DDGsrc0', -1)
(-1775, -1764, 'DDGsrc_stride', -1)
(-1869, -1882, 'DDGdst1', -1)
(-1780, -1791, 'DDGdst1', -1)
(-1889, -1862, 'DDGdst', -1)
(-1869, -1850, 'DDGsrc3', -1)
(-54, -983, 'AST', -1)
(-211, -1724, 'AST', -1)
(-345, -1255, 'AST', -1)
(-428, -1444, 'AST', -1)
(-491, -1106, 'AST', -1)
===========================
(-5, 0, 'D', 2, '2982', 'ptrdiff_t stride')
(-54, -1, '-', 0, '-2984', 'copy_width8_msa(src, stride, dst, stride, 8)')
(-64, 0, 'D', 2, '2995', 'ptrdiff_t stride')
(-211, -1, '-', 0, '-2997', 'avg_width16_msa(src, stride, dst, stride, 16)')
(-221, 0, 'D', 2, '3022', 'ptrdiff_t stride')
(-345, -1, '-', 0, '-3024', 'avg_width8_msa(src, stride, dst, stride, 8)')
(-355, 0, 'D', 2, '2967', 'ptrdiff_t stride')
(-428, -1, '-', 0, '-2969', 'copy_width16_msa(src, stride, dst, stride, 16)')
(-491, -1, '-', 0, '-3052', 'avg_width4_msa(src, stride, dst, stride, 4)')
(-438, 0, 'D', 2, '3050', 'ptrdiff_t stride')
(-999, -1, '-', 0, '-51', 'if (0 == height % 8)')
(-1051, -1, '-', 0, '-60', 'SD4(out4, out5, out6, out7, dst, dst_stride)')
(-987, -1, '-', 0, '-45', 'int32_t dst_stride')
(-1034, -1, '-', 0, '-56', 'src += (4 * src_stride)')
(-1015, -1, '-', 0, '-53', 'LD4(src, src_stride, out0, out1, out2, out3)')
(-1022, -1, '-', 0, '-54', 'src += (4 * src_stride)')
(-1006, -1, '-', 0, '-52', 'for (cnt = height >> 3; cnt--;)')
(-1058, -1, '-', 0, '-61', 'dst += (4 * dst_stride)')
(-1080, -1, '-', 0, '-65', 'LD4(src, src_stride, out0, out1, out2, out3)')
(-1046, -1, '-', 0, '-59', 'dst += (4 * dst_stride)')
(-1027, -1, '-', 0, '-55', 'LD4(src, src_stride, out4, out5, out6, out7)')
(-1039, -1, '-', 0, '-58', 'SD4(out0, out1, out2, out3, dst, dst_stride)')
(-1099, -1, '-', 0, '-69', 'dst += (4 * dst_stride)')
(-1071, -1, '-', 0, '-64', 'for (cnt = (height / 4); cnt--;)')
(-983, -1, '-', 0, '-44', 'copy_width8_msa (const uint8_t *src,int32_t src_stride,uint8_t *dst,int32_t dst_stride,int32_t height)')
(-1064, -1, '-', 0, '-63', 'if (0 == height % 4)')
(-988, -1, '-', 0, '-46', 'int32_t height')
(-1087, -1, '-', 0, '-66', 'src += (4 * src_stride)')
(-1092, -1, '-', 0, '-68', 'SD4(out0, out1, out2, out3, dst, dst_stride)')
(-1202, -1, '-', 0, '-91', 'ST4x8_UB(dst0, dst1, dst, dst_stride)')
(-1220, -1, '-', 0, '-94', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, src0)')
(-1178, -1, '-', 0, '-88', 'LW4(dst + 4 * dst_stride, dst_stride, tp0, tp1, tp2, tp3)')
(-1165, -1, '-', 0, '-86', 'LW4(dst, dst_stride, tp0, tp1, tp2, tp3)')
(-1195, -1, '-', 0, '-90', 'AVER_UB2_UB(src0, dst0, src1, dst1, dst0, dst1)')
(-1226, -1, '-', 0, '-95', 'LW4(dst, dst_stride, tp0, tp1, tp2, tp3)')
(-1244, -1, '-', 0, '-98', 'ST4x4_UB(dst0, dst0, 0, 1, 2, 3, dst, dst_stride)')
(-1129, -1, '-', 0, '-80', 'if (8 == height)')
(-1111, -1, '-', 0, '-75', 'int32_t height')
(-1208, -1, '-', 0, '-92', 'if (4 == height)')
(-1159, -1, '-', 0, '-85', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, src1)')
(-1134, -1, '-', 0, '-81', 'LW4(src, src_stride, tp0, tp1, tp2, tp3)')
(-1106, -1, '-', 0, '-73', 'avg_width4_msa (const uint8_t *src,int32_t src_stride,uint8_t *dst,int32_t dst_stride,int32_t height)')
(-1146, -1, '-', 0, '-83', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, src0)')
(-1110, -1, '-', 0, '-74', 'int32_t dst_stride')
(-1172, -1, '-', 0, '-87', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, dst0)')
(-1124, -1, '-', 0, '-78', 'dst0 = { 0 }')
(-1239, -1, '-', 0, '-97', 'dst0 = __msa_aver_u_b(src0, dst0)')
(-1152, -1, '-', 0, '-84', 'LW4(src, src_stride, tp0, tp1, tp2, tp3)')
(-1141, -1, '-', 0, '-82', 'src += 4 * src_stride')
(-1233, -1, '-', 0, '-96', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, dst0)')
(-1213, -1, '-', 0, '-93', 'LW4(src, src_stride, tp0, tp1, tp2, tp3)')
(-1189, -1, '-', 0, '-89', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, dst1)')
(-1426, -1, '-', 0, '-137', 'INSERT_D2_UB(tp2, tp3, dst1)')
(-1331, -1, '-', 0, '-119', 'INSERT_D2_UB(tp6, tp7, src3)')
(-1323, -1, '-', 0, '-117', 'INSERT_D2_UB(tp2, tp3, src1)')
(-1422, -1, '-', 0, '-136', 'INSERT_D2_UB(tp0, tp1, dst0)')
(-1353, -1, '-', 0, '-122', 'INSERT_D2_UB(tp0, tp1, dst0)')
(-1437, -1, '-', 0, '-139', 'ST8x4_UB(dst0, dst1, dst, dst_stride)')
(-1314, -1, '-', 0, '-115', 'src += 4 * src_stride')
(-1400, -1, '-', 0, '-132', 'LD4(src, src_stride, tp0, tp1, tp2, tp3)')
(-1415, -1, '-', 0, '-135', 'LD4(dst, dst_stride, tp0, tp1, tp2, tp3)')
(-1369, -1, '-', 0, '-126', 'AVER_UB4_UB(src0, dst0, src1, dst1, src2, dst2, src3, dst3, dst0,\\n                        dst1, dst2, dst3)')
(-1430, -1, '-', 0, '-138', 'AVER_UB2_UB(src0, dst0, src1, dst1, dst0, dst1)')
(-1259, -1, '-', 0, '-102', 'int32_t dst_stride')
(-1307, -1, '-', 0, '-114', 'LD4(src, src_stride, tp4, tp5, tp6, tp7)')
(-1407, -1, '-', 0, '-133', 'INSERT_D2_UB(tp0, tp1, src0)')
(-1279, -1, '-', 0, '-110', 'if (0 == (height % 8))')
(-1255, -1, '-', 0, '-101', 'avg_width8_msa (const uint8_t *src,int32_t src_stride,uint8_t *dst,int32_t dst_stride,int32_t height)')
(-1411, -1, '-', 0, '-134', 'INSERT_D2_UB(tp2, tp3, src1)')
(-1361, -1, '-', 0, '-124', 'INSERT_D2_UB(tp4, tp5, dst2)')
(-1327, -1, '-', 0, '-118', 'INSERT_D2_UB(tp4, tp5, src2)')
(-1389, -1, '-', 0, '-129', 'dst += 8 * dst_stride')
(-1365, -1, '-', 0, '-125', 'INSERT_D2_UB(tp6, tp7, dst3)')
(-1335, -1, '-', 0, '-120', 'LD4(dst, dst_stride, tp0, tp1, tp2, tp3)')
(-1295, -1, '-', 0, '-112', 'LD4(src, src_stride, tp0, tp1, tp2, tp3)')
(-1382, -1, '-', 0, '-128', 'ST8x8_UB(dst0, dst1, dst2, dst3, dst, dst_stride)')
(-1302, -1, '-', 0, '-113', 'src += 4 * src_stride')
(-1357, -1, '-', 0, '-123', 'INSERT_D2_UB(tp2, tp3, dst1)')
(-1260, -1, '-', 0, '-103', 'int32_t height')
(-1319, -1, '-', 0, '-116', 'INSERT_D2_UB(tp0, tp1, src0)')
(-1286, -1, '-', 0, '-111', 'for (cnt = (height >> 3); cnt--;)')
(-1342, -1, '-', 0, '-121', 'LD4(dst + 4 * dst_stride, dst_stride, tp4, tp5, tp6, tp7)')
(-1395, -1, '-', 0, '-131', 'if (4 == height)')
(-1705, -1, '-', 0, '-38', 'src += (4 * src_stride)')
(-1493, -1, '-', 0, '-12', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1654, -1, '-', 0, '-32', 'dst += (8 * dst_stride)')
(-1643, -1, '-', 0, '-31', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, dst_stride)')
(-1682, -1, '-', 0, '-35', 'if (0 == height % 4)')
(-1488, -1, '-', 0, '-11', 'if (16 == height)')
(-1689, -1, '-', 0, '-36', 'for (cnt = (height >> 2); cnt--;)')
(-1590, -1, '-', 0, '-24', 'dst += (8 * dst_stride)')
(-1520, -1, '-', 0, '-15', 'dst += (8 * dst_stride)')
(-1622, -1, '-', 0, '-28', 'dst += (8 * dst_stride)')
(-1606, -1, '-', 0, '-26', 'src += (8 * src_stride)')
(-1579, -1, '-', 0, '-23', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, dst_stride)')
(-1465, -1, '-', 0, '-9', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1444, -1, '-', 0, '-1', 'copy_width16_msa (const uint8_t *src,int32_t src_stride,uint8_t *dst,int32_t dst_stride,int32_t height)')
(-1558, -1, '-', 0, '-20', 'if (32 == height)')
(-1670, -1, '-', 0, '-34', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, dst_stride)')
(-1595, -1, '-', 0, '-25', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1552, -1, '-', 0, '-19', 'dst += (8 * dst_stride)')
(-1509, -1, '-', 0, '-14', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, dst_stride)')
(-1536, -1, '-', 0, '-17', 'src += (8 * src_stride)')
(-1710, -1, '-', 0, '-39', 'ST_UB4(src0, src1, src2, src3, dst, dst_stride)')
(-1541, -1, '-', 0, '-18', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, dst_stride)')
(-1638, -1, '-', 0, '-30', 'src += (8 * src_stride)')
(-1525, -1, '-', 0, '-16', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1448, -1, '-', 0, '-2', 'int32_t dst_stride')
(-1574, -1, '-', 0, '-22', 'src += (8 * src_stride)')
(-1659, -1, '-', 0, '-33', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1476, -1, '-', 0, '-10', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, dst_stride)')
(-1504, -1, '-', 0, '-13', 'src += (8 * src_stride)')
(-1611, -1, '-', 0, '-27', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, dst_stride)')
(-1449, -1, '-', 0, '-3', 'int32_t height')
(-1460, -1, '-', 0, '-8', 'if (8 == height)')
(-1627, -1, '-', 0, '-29', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1698, -1, '-', 0, '-37', 'LD_UB4(src, src_stride, src0, src1, src2, src3)')
(-1563, -1, '-', 0, '-21', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1717, -1, '-', 0, '-40', 'dst += (4 * dst_stride)')
(-1791, -1, '-', 0, '-156', 'AVER_UB4_UB(src0, dst0, src1, dst1, src2, dst2, src3, dst3,\\n                        dst0, dst1, dst2, dst3)')
(-1841, -1, '-', 0, '-164', 'for (cnt = (height / 4); cnt--;)')
(-1804, -1, '-', 0, '-158', 'AVER_UB4_UB(src4, dst4, src5, dst5, src6, dst6, src7, dst7,\\n                        dst4, dst5, dst6, dst7)')
(-1850, -1, '-', 0, '-165', 'LD_UB4(src, src_stride, src0, src1, src2, src3)')
(-1748, -1, '-', 0, '-150', 'if (0 == (height % 8))')
(-1882, -1, '-', 0, '-171', 'ST_UB4(dst0, dst1, dst2, dst3, dst, dst_stride)')
(-1817, -1, '-', 0, '-160', 'ST_UB8(dst0, dst1, dst2, dst3, dst4, dst5, dst6, dst7, dst, dst_stride)')
(-1834, -1, '-', 0, '-163', 'if (0 == (height % 4))')
(-1869, -1, '-', 0, '-169', 'AVER_UB4_UB(src0, dst0, src1, dst1, src2, dst2, src3, dst3,\\n                        dst0, dst1, dst2, dst3)')
(-1828, -1, '-', 0, '-161', 'dst += (8 * dst_stride)')
(-1780, -1, '-', 0, '-154', 'LD_UB8(dst, dst_stride, dst0, dst1, dst2, dst3, dst4, dst5, dst6, dst7)')
(-1857, -1, '-', 0, '-166', 'src += (4 * src_stride)')
(-1728, -1, '-', 0, '-143', 'int32_t dst_stride')
(-1724, -1, '-', 0, '-142', 'avg_width16_msa (const uint8_t *src,int32_t src_stride,uint8_t *dst,int32_t dst_stride,int32_t height)')
(-1862, -1, '-', 0, '-167', 'LD_UB4(dst, dst_stride, dst0, dst1, dst2, dst3)')
(-1764, -1, '-', 0, '-152', 'LD_UB8(src, src_stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-1775, -1, '-', 0, '-153', 'src += (8 * src_stride)')
(-1729, -1, '-', 0, '-144', 'int32_t height')
(-1889, -1, '-', 0, '-172', 'dst += (4 * dst_stride)')
(-1755, -1, '-', 0, '-151', 'for (cnt = (height / 8); cnt--;)')
---------------------------
(-28, -47, 'DDG', 1)
(-5, -16, 'DDG', 1)
(-23, -28, 'DDG', 1)
(-16, -23, 'DDG', 1)
(-28, -35, 'DDG', 1)
(-42, -47, 'DDG', 1)
(-16, -35, 'DDG', 1)
(-16, -35, 'DDG', 1)
(-35, -42, 'DDG', 1)
(-16, -35, 'DDG', 1)
(-23, -28, 'DDG', 1)
(-28, -47, 'DDG', 1)
(-16, -23, 'DDG', 1)
(-16, -35, 'DDG', 1)
(-28, -47, 'DDG', 1)
(-42, -47, 'DDG', 1)
(-35, -42, 'DDG', 1)
(-23, -42, 'DDG', 1)
(-28, -47, 'DDG', 1)
(-123, -152, 'DDG', 1)
(-110, -152, 'DDG', 1)
(-83, -94, 'DDG', 1)
(-163, -174, 'DDG', 1)
(-110, -152, 'DDG', 1)
(-152, -174, 'DDG', 1)
(-163, -187, 'DDG', 1)
(-152, -174, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-152, -187, 'DDG', 1)
(-187, -200, 'DDG', 1)
(-123, -152, 'DDG', 1)
(-152, -187, 'DDG', 1)
(-163, -174, 'DDG', 1)
(-99, -110, 'DDG', 1)
(-123, -136, 'DDG', 1)
(-110, -136, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-163, -174, 'DDG', 1)
(-163, -200, 'DDG', 1)
(-174, -200, 'DDG', 1)
(-152, -163, 'DDG', 1)
(-99, -123, 'DDG', 1)
(-99, -123, 'DDG', 1)
(-99, -110, 'DDG', 1)
(-136, -147, 'DDG', 1)
(-83, -123, 'DDG', 1)
(-83, -110, 'DDG', 1)
(-83, -94, 'DDG', 1)
(-123, -136, 'DDG', 1)
(-99, -136, 'DDG', 1)
(-99, -110, 'DDG', 1)
(-110, -136, 'DDG', 1)
(-123, -136, 'DDG', 1)
(-123, -152, 'DDG', 1)
(-152, -187, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-147, -163, 'DDG', 1)
(-163, -174, 'DDG', 1)
(-187, -200, 'DDG', 1)
(-174, -200, 'DDG', 1)
(-187, -200, 'DDG', 1)
(-163, -200, 'DDG', 1)
(-110, -136, 'DDG', 1)
(-174, -200, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-99, -110, 'DDG', 1)
(-147, -152, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-83, -123, 'DDG', 1)
(-99, -123, 'DDG', 1)
(-152, -187, 'DDG', 1)
(-94, -152, 'DDG', 1)
(-123, -152, 'DDG', 1)
(-163, -187, 'DDG', 1)
(-163, -187, 'DDG', 1)
(-174, -200, 'DDG', 1)
(-110, -136, 'DDG', 1)
(-83, -110, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-83, -110, 'DDG', 1)
(-94, -147, 'DDG', 1)
(-110, -152, 'DDG', 1)
(-152, -174, 'DDG', 1)
(-94, -99, 'DDG', 1)
(-136, -147, 'DDG', 1)
(-136, -163, 'DDG', 1)
(-83, -123, 'DDG', 1)
(-99, -123, 'DDG', 1)
(-83, -110, 'DDG', 1)
(-99, -136, 'DDG', 1)
(-163, -187, 'DDG', 1)
(-83, -123, 'DDG', 1)
(-110, -152, 'DDG', 1)
(-64, -83, 'DDG', 1)
(-187, -200, 'DDG', 1)
(-123, -136, 'DDG', 1)
(-152, -174, 'DDG', 1)
(-263, -298, 'DDG', 1)
(-248, -313, 'DDG', 1)
(-256, -279, 'DDG', 1)
(-268, -291, 'DDG', 1)
(-298, -338, 'DDG', 1)
(-268, -287, 'DDG', 1)
(-256, -263, 'DDG', 1)
(-263, -268, 'DDG', 1)
(-283, -298, 'DDG', 1)
(-291, -313, 'DDG', 1)
(-298, -321, 'DDG', 1)
(-279, -291, 'DDG', 1)
(-313, -325, 'DDG', 1)
(-287, -298, 'DDG', 1)
(-283, -298, 'DDG', 1)
(-291, -309, 'DDG', 1)
(-275, -325, 'DDG', 1)
(-291, -298, 'DDG', 1)
(-248, -317, 'DDG', 1)
(-248, -321, 'DDG', 1)
(-291, -309, 'DDG', 1)
(-325, -338, 'DDG', 1)
(-325, -338, 'DDG', 1)
(-275, -291, 'DDG', 1)
(-256, -279, 'DDG', 1)
(-279, -325, 'DDG', 1)
(-268, -283, 'DDG', 1)
(-268, -283, 'DDG', 1)
(-221, -256, 'DDG', 1)
(-298, -317, 'DDG', 1)
(-242, -283, 'DDG', 1)
(-298, -317, 'DDG', 1)
(-256, -275, 'DDG', 1)
(-321, -325, 'DDG', 1)
(-242, -279, 'DDG', 1)
(-317, -325, 'DDG', 1)
(-248, -309, 'DDG', 1)
(-291, -298, 'DDG', 1)
(-275, -291, 'DDG', 1)
(-263, -268, 'DDG', 1)
(-256, -263, 'DDG', 1)
(-242, -287, 'DDG', 1)
(-309, -325, 'DDG', 1)
(-298, -321, 'DDG', 1)
(-279, -291, 'DDG', 1)
(-291, -338, 'DDG', 1)
(-242, -275, 'DDG', 1)
(-256, -275, 'DDG', 1)
(-268, -287, 'DDG', 1)
(-291, -313, 'DDG', 1)
(-325, -338, 'DDG', 1)
(-283, -325, 'DDG', 1)
(-287, -298, 'DDG', 1)
(-325, -338, 'DDG', 1)
(-287, -325, 'DDG', 1)
(-385, -412, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-374, -385, 'DDG', 1)
(-412, -417, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-385, -390, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-401, -412, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-390, -401, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-401, -412, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-355, -374, 'DDG', 1)
(-412, -417, 'DDG', 1)
(-374, -401, 'DDG', 1)
(-374, -385, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-390, -417, 'DDG', 1)
(-385, -390, 'DDG', 1)
(-464, -482, 'DDG', 1)
(-438, -451, 'DDG', 1)
(-451, -458, 'DDG', 1)
(-446, -471, 'DDG', 1)
(-464, -471, 'DDG', 1)
(-458, -464, 'DDG', 1)
(-464, -471, 'DDG', 1)
(-451, -458, 'DDG', 1)
(-458, -477, 'DDG', 1)
(-458, -464, 'DDG', 1)
(-451, -464, 'DDG', 1)
(-458, -464, 'DDG', 1)
(-464, -482, 'DDG', 1)
(-464, -471, 'DDG', 1)
(-451, -458, 'DDG', 1)
(-446, -458, 'DDG', 1)
(-471, -477, 'DDG', 1)
(-477, -482, 'DDG', 1)
(-464, -471, 'DDG', 1)
(-458, -464, 'DDG', 1)
(-451, -458, 'DDG', 1)
===========================
(-16, 1, '-', 0, '+2986', 'LD4(src, stride, src0, src1, src2, src3)')
(-42, 1, '-', 0, '+2990', 'dst += 4 * stride')
(-5, 0, 'D', 2, '2982', 'ptrdiff_t stride')
(-35, 1, '-', 0, '+2989', 'SD4(src0, src1, src2, src3, dst, stride)')
(-47, 1, '-', 0, '+2991', 'SD4(src4, src5, src6, src7, dst, stride)')
(-28, 1, '-', 0, '+2988', 'LD4(src, stride, src4, src5, src6, src7)')
(-23, 1, '-', 0, '+2987', 'src += 4 * stride')
(-174, 1, '-', 0, '+3014', 'AVER_UB4_UB(src0, dst0, src1, dst1, src2, dst2, src3, dst3, dst0, dst1,\\\\n                dst2, dst3)')
(-123, 1, '-', 0, '+3006', 'AVER_UB4_UB(src4, dst4, src5, dst5, src6, dst6, src7, dst7, dst4, dst5,\\\\n                dst6, dst7)')
(-64, 0, 'D', 2, '2995', 'ptrdiff_t stride')
(-187, 1, '-', 0, '+3016', 'AVER_UB4_UB(src4, dst4, src5, dst5, src6, dst6, src7, dst7, dst4, dst5,\\\\n                dst6, dst7)')
(-136, 1, '-', 0, '+3008', 'ST_UB8(dst0, dst1, dst2, dst3, dst4, dst5, dst6, dst7, dst, stride)')
(-147, 1, '-', 0, '+3009', 'dst += (8 * stride)')
(-94, 1, '-', 0, '+3001', 'src += (8 * stride)')
(-200, 1, '-', 0, '+3018', 'ST_UB8(dst0, dst1, dst2, dst3, dst4, dst5, dst6, dst7, dst, stride)')
(-152, 1, '-', 0, '+3011', 'LD_UB8(src, stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-99, 1, '-', 0, '+3002', 'LD_UB8(dst, stride, dst0, dst1, dst2, dst3, dst4, dst5, dst6, dst7)')
(-110, 1, '-', 0, '+3004', 'AVER_UB4_UB(src0, dst0, src1, dst1, src2, dst2, src3, dst3, dst0, dst1,\\\\n                dst2, dst3)')
(-83, 1, '-', 0, '+3000', 'LD_UB8(src, stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-163, 1, '-', 0, '+3012', 'LD_UB8(dst, stride, dst0, dst1, dst2, dst3, dst4, dst5, dst6, dst7)')
(-248, 1, '-', 0, '+3026', 'dst1 = { 0 }')
(-321, 1, '-', 0, '+3041', 'INSERT_D2_UB(tp6, tp7, dst3)')
(-309, 1, '-', 0, '+3038', 'INSERT_D2_UB(tp0, tp1, dst0)')
(-283, 1, '-', 0, '+3033', 'INSERT_D2_UB(tp4, tp5, src2)')
(-242, 1, '-', 0, '+3025', 'src3 = { 0 }')
(-298, 1, '-', 0, '+3037', 'LD4(dst + 4 * stride, stride, tp4, tp5, tp6, tp7)')
(-291, 1, '-', 0, '+3036', 'LD4(dst, stride, tp0, tp1, tp2, tp3)')
(-317, 1, '-', 0, '+3040', 'INSERT_D2_UB(tp4, tp5, dst2)')
(-287, 1, '-', 0, '+3034', 'INSERT_D2_UB(tp6, tp7, src3)')
(-279, 1, '-', 0, '+3032', 'INSERT_D2_UB(tp2, tp3, src1)')
(-313, 1, '-', 0, '+3039', 'INSERT_D2_UB(tp2, tp3, dst1)')
(-256, 1, '-', 0, '+3028', 'LD4(src, stride, tp0, tp1, tp2, tp3)')
(-275, 1, '-', 0, '+3031', 'INSERT_D2_UB(tp0, tp1, src0)')
(-221, 0, 'D', 2, '3022', 'ptrdiff_t stride')
(-325, 1, '-', 0, '+3043', 'AVER_UB4_UB(src0, dst0, src1, dst1, src2, dst2, src3, dst3, dst0, dst1,\\\\n                dst2, dst3)')
(-268, 1, '-', 0, '+3030', 'LD4(src, stride, tp4, tp5, tp6, tp7)')
(-263, 1, '-', 0, '+3029', 'src += 4 * stride')
(-338, 1, '-', 0, '+3046', 'ST8x8_UB(dst0, dst1, dst2, dst3, dst, stride)')
(-355, 0, 'D', 2, '2967', 'ptrdiff_t stride')
(-401, 1, '-', 0, '+2976', 'ST_UB8(src0, src1, src2, src3, src4, src5, src6, src7, dst, stride)')
(-385, 1, '-', 0, '+2973', 'src += (8 * stride)')
(-412, 1, '-', 0, '+2977', 'dst += (8 * stride)')
(-374, 1, '-', 0, '+2972', 'LD_UB8(src, stride, src0, src1, src2, src3, src4, src5, src6, src7)')
(-390, 1, '-', 0, '+2974', 'LD_UB8(src, stride, src8, src9, src10, src11, src12, src13, src14, src15)')
(-417, 1, '-', 0, '+2978', 'ST_UB8(src8, src9, src10, src11, src12, src13, src14, src15, dst, stride)')
(-458, 1, '-', 0, '+3056', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, src0)')
(-446, 1, '-', 0, '+3053', 'src0 = { 0 }')
(-482, 1, '-', 0, '+3062', 'ST4x4_UB(dst0, dst0, 0, 1, 2, 3, dst, stride)')
(-471, 1, '-', 0, '+3058', 'INSERT_W4_UB(tp0, tp1, tp2, tp3, dst0)')
(-438, 0, 'D', 2, '3050', 'ptrdiff_t stride')
(-477, 1, '-', 0, '+3060', 'dst0 = __msa_aver_u_b(src0, dst0)')
(-451, 1, '-', 0, '+3055', 'LW4(src, stride, tp0, tp1, tp2, tp3)')
(-464, 1, '-', 0, '+3057', 'LW4(dst, stride, tp0, tp1, tp2, tp3)')
