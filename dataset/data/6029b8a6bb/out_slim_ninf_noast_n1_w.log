(-206, -221, 'DDGbuf + 1', -1)
(-158, -161, 'CDG', 1)
(-10, -238, 'DDGmarkers', -1)
(-233, -182, 'DDGbuf', -1)
(-158, -168, 'DDG&offset', 1)
(-160, -173, 'DDGmarkers[i]', 1)
(-200, -233, 'DDG*buf', -1)
(-182, -227, 'DDGbuf', -1)
(-182, -200, 'DDGbuf', -1)
(-182, -218, 'DDGbuf', -1)
(-158, -168, 'CDG', 1)
(-233, -239, 'DDGbuf', -1)
(-160, -174, 'DDGmarkers[i]', 1)
(-212, -236, 'DDGdata_size', -1)
(-236, -237, 'CDG', -1)
(-205, -218, 'CDG', -1)
(-128, -138, 'DDGbuf', 1)
(-137, -138, 'CDG', 1)
(-137, -148, 'CDG', 1)
(-200, -16, 'DDGstate', -1)
(-218, -182, 'DDGbuf', -1)
(-236, -239, 'CDG', -1)
(-161, -168, 'DDGpos', 1)
(-238, -69, 'DDGmarkers[i]', -1)
(-238, -244, 'DDGmarkers[i]', -1)
(-236, -242, 'CDG', -1)
(-137, -152, 'CDG', 1)
(-182, -221, 'DDGbuf', -1)
(-205, -212, 'CDG', -1)
(-242, -200, 'DDGstate', -1)
(-138, -158, 'DDGdata_type', 1)
(-200, -239, 'DDG*buf', -1)
(-160, -64, 'DDGmarkers[i]', 1)
(-137, -142, 'CDG', 1)
(-120, -16, 'DDGstate', 1)
(-108, -16, 'CDG', 1)
(-142, -158, 'DDGdata_size', 1)
(-227, -236, 'DDGdata_size', -1)
(-120, -128, 'DDGp->buf[pos]', 1)
(-205, -227, 'CDG', -1)
(-148, -158, 'DDGdata_type', 1)
(-221, -206, 'DDGbuf + 1', -1)
(-236, -239, 'DDG&offset', -1)
(-200, -218, 'DDG*buf', -1)
(-158, -159, 'CDG', 1)
(-16, -128, 'CDG', 1)
(-2, -182, 'DDGp', -1)
(-158, -171, 'CDG', 1)
(-200, -182, 'DDG*buf', -1)
(-238, -245, 'DDGmarkers[i]', -1)
(-205, -221, 'CDG', -1)
(-205, -233, 'CDG', -1)
(-172, -64, 'DDGsum', 1)
(-152, -158, 'DDGdata_size', 1)
(-243, -64, 'DDGsum', -1)
(-2, -108, 'DDGp', 1)
(-239, -182, 'DDGbuf', -1)
(-238, -64, 'DDGmarkers[i]', -1)
(-138, -142, 'DDGbuf', 1)
(-10, -160, 'DDGmarkers', 1)
(-221, -236, 'DDGdata_type', -1)
(-182, -206, 'DDGbuf', -1)
(-174, -175, 'CDG', 1)
(-148, -152, 'DDGbuf', 1)
(-182, -16, 'CDG', -1)
(-172, -174, 'DDGsum', 1)
(-108, -120, 'CDG', 1)
(-236, -238, 'CDG', -1)
(-205, -206, 'CDG', -1)
(-206, -236, 'DDGdata_type', -1)
(-218, -239, 'DDGbuf', -1)
(-182, -233, 'DDGbuf', -1)
(-243, -245, 'DDGsum', -1)
(-171, -120, 'DDGstate', 1)
(-200, -212, 'DDG*buf', -1)
(-182, -212, 'DDGbuf', -1)
(-200, -227, 'DDG*buf', -1)
(-128, -148, 'DDGbuf', 1)
(-182, -200, 'CDG', -1)
(-168, -108, 'DDGpos', 1)
(-159, -161, 'DDGstate', 1)
(-158, -160, 'CDG', 1)
(-245, -246, 'CDG', -1)
(-200, -206, 'DDG*buf', -1)
(-160, -69, 'DDGmarkers[i]', 1)
(-200, -221, 'DDG*buf', -1)
===========================
(-236, -1, '-', 0, '-108', 'if (s337m_get_offset_and_codec(NULL, state, data_type, data_size, &offset, NULL))')
(-172, 1, '-', 0, '+119', 'sum = max = 0')
(-142, 1, '-', 0, '+100', 'data_size = AV_RL16(buf + 2)')
(-10, 0, 'D', 24, '88', 'markers[3] = { 0 }')
(-161, 1, '-', 0, '+114', 'pos  += IS_16LE_MARKER(state) ? 4 : 6')
(-159, 1, '-', 0, '+111', 'i = IS_16LE_MARKER(state) ? 0 : IS_20LE_MARKER(state) ? 1 : 2')
(-2, 0, 'D', 7, '85', 's337m_probe (AVProbeData *p)')
(-237, -1, '-', 0, '-111', 'i = IS_16LE_MARKER(state) ? 0 : IS_20LE_MARKER(state) ? 1 : 2')
(-69, 0, 'D', 10, '122', 'if (markers[max] < markers[i])')
(-182, -1, '-', 0, '-92', 'for (buf = p->buf; buf < p->buf + p->buf_size; buf++)')
(-108, 1, '-', 0, '+92', 'for (pos = 0; pos < p->buf_size; pos++)')
(-120, 1, '-', 0, '+93', 'state = (state << 8) | p->buf[pos]')
(-244, -1, '-', 0, '-120', 'for (i = 0; i < FF_ARRAY_ELEMS(markers); i++)')
(-137, 1, '-', 0, '+98', 'if (IS_16LE_MARKER(state))')
(-174, 1, '-', 0, '+126', 'if (markers[max] > 3 && markers[max] * 4 > sum * 3)')
(-206, -1, '-', 0, '-99', 'data_type = AV_RL16(buf + 1)')
(-148, 1, '-', 0, '+103', 'data_type = AV_RL24(buf    )')
(-200, -1, '-', 0, '-93', 'state = (state << 8) | *buf')
(-245, -1, '-', 0, '-126', 'if (markers[max] > 3 && markers[max] * 4 > sum * 3)')
(-128, 1, '-', 0, '+97', 'buf = p->buf + pos + 1')
(-239, -1, '-', 0, '-114', 'buf  += offset')
(-233, -1, '-', 0, '-105', 'buf += 6')
(-138, 1, '-', 0, '+99', 'data_type = AV_RL16(buf    )')
(-173, 1, '-', 0, '+120', 'for (i = 0; i < FF_ARRAY_ELEMS(markers); i++)')
(-175, 1, '-', 0, '+129', 'return 0;')
(-218, -1, '-', 0, '-101', 'buf += 4')
(-171, 1, '-', 0, '+116', 'state = 0')
(-16, 0, 'D', 1, '94', 'if (!IS_LE_MARKER(state))')
(-221, -1, '-', 0, '-103', 'data_type = AV_RL24(buf + 1)')
(-212, -1, '-', 0, '-100', 'data_size = AV_RL16(buf + 3)')
(-168, 1, '-', 0, '+115', 'pos  += offset')
(-238, -1, '-', 0, '-112', 'markers[i]++')
(-158, 1, '-', 0, '+108', 'if (s337m_get_offset_and_codec(NULL, state, data_type, data_size, &offset, NULL))')
(-227, -1, '-', 0, '-104', 'data_size = AV_RL24(buf + 4)')
(-242, -1, '-', 0, '-116', 'state = 0')
(-246, -1, '-', 0, '-129', 'return 0;')
(-64, 0, 'D', 2, '121', 'sum += markers[i]')
(-160, 1, '-', 0, '+112', 'markers[i]++')
(-243, -1, '-', 0, '-119', 'sum = max = 0')
(-152, 1, '-', 0, '+104', 'data_size = AV_RL24(buf + 3)')
(-205, -1, '-', 0, '-98', 'if (IS_16LE_MARKER(state))')
---------------------------
(-206, -221, 'DDGbuf + 1', -1)
(-10, -238, 'DDGmarkers', -1)
(-233, -182, 'DDGbuf', -1)
(-200, -233, 'DDG*buf', -1)
(-182, -227, 'DDGbuf', -1)
(-182, -200, 'DDGbuf', -1)
(-182, -218, 'DDGbuf', -1)
(-233, -239, 'DDGbuf', -1)
(-212, -236, 'DDGdata_size', -1)
(-236, -237, 'CDG', -1)
(-205, -218, 'CDG', -1)
(-200, -16, 'DDGstate', -1)
(-218, -182, 'DDGbuf', -1)
(-236, -239, 'CDG', -1)
(-238, -69, 'DDGmarkers[i]', -1)
(-238, -244, 'DDGmarkers[i]', -1)
(-236, -242, 'CDG', -1)
(-182, -221, 'DDGbuf', -1)
(-205, -212, 'CDG', -1)
(-242, -200, 'DDGstate', -1)
(-200, -239, 'DDG*buf', -1)
(-227, -236, 'DDGdata_size', -1)
(-205, -227, 'CDG', -1)
(-221, -206, 'DDGbuf + 1', -1)
(-236, -239, 'DDG&offset', -1)
(-200, -218, 'DDG*buf', -1)
(-2, -182, 'DDGp', -1)
(-200, -182, 'DDG*buf', -1)
(-238, -245, 'DDGmarkers[i]', -1)
(-205, -221, 'CDG', -1)
(-205, -233, 'CDG', -1)
(-243, -64, 'DDGsum', -1)
(-239, -182, 'DDGbuf', -1)
(-238, -64, 'DDGmarkers[i]', -1)
(-221, -236, 'DDGdata_type', -1)
(-182, -206, 'DDGbuf', -1)
(-182, -16, 'CDG', -1)
(-236, -238, 'CDG', -1)
(-205, -206, 'CDG', -1)
(-206, -236, 'DDGdata_type', -1)
(-218, -239, 'DDGbuf', -1)
(-182, -233, 'DDGbuf', -1)
(-243, -245, 'DDGsum', -1)
(-200, -212, 'DDG*buf', -1)
(-182, -212, 'DDGbuf', -1)
(-200, -227, 'DDG*buf', -1)
(-182, -200, 'CDG', -1)
(-245, -246, 'CDG', -1)
(-200, -206, 'DDG*buf', -1)
(-200, -221, 'DDG*buf', -1)
===========================
(-236, -1, '-', 0, '-108', 'if (s337m_get_offset_and_codec(NULL, state, data_type, data_size, &offset, NULL))')
(-10, 0, 'D', 24, '88', 'markers[3] = { 0 }')
(-2, 0, 'D', 7, '85', 's337m_probe (AVProbeData *p)')
(-237, -1, '-', 0, '-111', 'i = IS_16LE_MARKER(state) ? 0 : IS_20LE_MARKER(state) ? 1 : 2')
(-69, 0, 'D', 10, '122', 'if (markers[max] < markers[i])')
(-182, -1, '-', 0, '-92', 'for (buf = p->buf; buf < p->buf + p->buf_size; buf++)')
(-244, -1, '-', 0, '-120', 'for (i = 0; i < FF_ARRAY_ELEMS(markers); i++)')
(-206, -1, '-', 0, '-99', 'data_type = AV_RL16(buf + 1)')
(-200, -1, '-', 0, '-93', 'state = (state << 8) | *buf')
(-245, -1, '-', 0, '-126', 'if (markers[max] > 3 && markers[max] * 4 > sum * 3)')
(-239, -1, '-', 0, '-114', 'buf  += offset')
(-233, -1, '-', 0, '-105', 'buf += 6')
(-218, -1, '-', 0, '-101', 'buf += 4')
(-16, 0, 'D', 1, '94', 'if (!IS_LE_MARKER(state))')
(-221, -1, '-', 0, '-103', 'data_type = AV_RL24(buf + 1)')
(-212, -1, '-', 0, '-100', 'data_size = AV_RL16(buf + 3)')
(-238, -1, '-', 0, '-112', 'markers[i]++')
(-227, -1, '-', 0, '-104', 'data_size = AV_RL24(buf + 4)')
(-242, -1, '-', 0, '-116', 'state = 0')
(-246, -1, '-', 0, '-129', 'return 0;')
(-64, 0, 'D', 2, '121', 'sum += markers[i]')
(-243, -1, '-', 0, '-119', 'sum = max = 0')
(-205, -1, '-', 0, '-98', 'if (IS_16LE_MARKER(state))')
---------------------------
(-158, -161, 'CDG', 1)
(-158, -168, 'DDG&offset', 1)
(-160, -173, 'DDGmarkers[i]', 1)
(-158, -168, 'CDG', 1)
(-160, -174, 'DDGmarkers[i]', 1)
(-128, -138, 'DDGbuf', 1)
(-137, -138, 'CDG', 1)
(-137, -148, 'CDG', 1)
(-161, -168, 'DDGpos', 1)
(-137, -152, 'CDG', 1)
(-138, -158, 'DDGdata_type', 1)
(-160, -64, 'DDGmarkers[i]', 1)
(-137, -142, 'CDG', 1)
(-120, -16, 'DDGstate', 1)
(-108, -16, 'CDG', 1)
(-142, -158, 'DDGdata_size', 1)
(-120, -128, 'DDGp->buf[pos]', 1)
(-148, -158, 'DDGdata_type', 1)
(-158, -159, 'CDG', 1)
(-16, -128, 'CDG', 1)
(-158, -171, 'CDG', 1)
(-172, -64, 'DDGsum', 1)
(-152, -158, 'DDGdata_size', 1)
(-2, -108, 'DDGp', 1)
(-138, -142, 'DDGbuf', 1)
(-10, -160, 'DDGmarkers', 1)
(-174, -175, 'CDG', 1)
(-148, -152, 'DDGbuf', 1)
(-172, -174, 'DDGsum', 1)
(-108, -120, 'CDG', 1)
(-171, -120, 'DDGstate', 1)
(-128, -148, 'DDGbuf', 1)
(-168, -108, 'DDGpos', 1)
(-159, -161, 'DDGstate', 1)
(-158, -160, 'CDG', 1)
(-160, -69, 'DDGmarkers[i]', 1)
===========================
(-172, 1, '-', 0, '+119', 'sum = max = 0')
(-142, 1, '-', 0, '+100', 'data_size = AV_RL16(buf + 2)')
(-10, 0, 'D', 24, '88', 'markers[3] = { 0 }')
(-161, 1, '-', 0, '+114', 'pos  += IS_16LE_MARKER(state) ? 4 : 6')
(-159, 1, '-', 0, '+111', 'i = IS_16LE_MARKER(state) ? 0 : IS_20LE_MARKER(state) ? 1 : 2')
(-2, 0, 'D', 7, '85', 's337m_probe (AVProbeData *p)')
(-69, 0, 'D', 10, '122', 'if (markers[max] < markers[i])')
(-108, 1, '-', 0, '+92', 'for (pos = 0; pos < p->buf_size; pos++)')
(-120, 1, '-', 0, '+93', 'state = (state << 8) | p->buf[pos]')
(-137, 1, '-', 0, '+98', 'if (IS_16LE_MARKER(state))')
(-174, 1, '-', 0, '+126', 'if (markers[max] > 3 && markers[max] * 4 > sum * 3)')
(-148, 1, '-', 0, '+103', 'data_type = AV_RL24(buf    )')
(-128, 1, '-', 0, '+97', 'buf = p->buf + pos + 1')
(-138, 1, '-', 0, '+99', 'data_type = AV_RL16(buf    )')
(-173, 1, '-', 0, '+120', 'for (i = 0; i < FF_ARRAY_ELEMS(markers); i++)')
(-175, 1, '-', 0, '+129', 'return 0;')
(-171, 1, '-', 0, '+116', 'state = 0')
(-16, 0, 'D', 1, '94', 'if (!IS_LE_MARKER(state))')
(-168, 1, '-', 0, '+115', 'pos  += offset')
(-158, 1, '-', 0, '+108', 'if (s337m_get_offset_and_codec(NULL, state, data_type, data_size, &offset, NULL))')
(-64, 0, 'D', 2, '121', 'sum += markers[i]')
(-160, 1, '-', 0, '+112', 'markers[i]++')
(-152, 1, '-', 0, '+104', 'data_size = AV_RL24(buf + 3)')
